/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cell.js":
/*!*****************!*\
  !*** ./cell.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Wall = __webpack_require__(/*! ./wall */ \"./wall.js\");\n\nfunction Cell(row, col, grid) {\n    this.row = row;\n    this.col = col;\n    this.grid = grid;\n    this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n    // this.walls = []\n    this.visited = false;\n\n    // [1, 2, 3, 4].forEach(() => this.walls.push(new Wall()));\n\n    this.highlight = function () {\n        // console.log(this.row, this.col);\n        const startRow = this.row * 40;\n        const startCol = this.col * 40;\n        noStroke();\n        fill(\"purple\");\n        rect(startRow, startCol, 40, 40)\n    }\n\n    this.render = function () {\n        const startRow = this.row * 40;\n        const startCol = this.col * 40;\n\n        // x, y, width, height\n        // rect(startX, startY, 40, 40)\n        // noFill();\n\n        for (let i = 0; i < this.walls.length; i++) {\n            if (this.walls[i].present) {\n                this.walls[i].render(i, startRow, startCol);\n            } else {\n                this.walls[i].derender(i, startRow, startCol);\n            }\n        }\n\n\n        if (this.visited) {\n            noStroke();\n            fill(\"white\");\n            rect(startRow + 1, startCol + 1, 38, 38)\n        }\n\n\n    }\n\n    this.renderUser = function(color) {\n        const startRow = this.row * 40;\n        const startCol = this.col * 40;\n\n        for (let i = 0; i < this.walls.length; i++) {\n            if (this.walls[i].present) {\n                this.walls[i].render(i, startRow, startCol);\n            } else {\n                this.walls[i].derender(i, startRow, startCol);\n            }\n        }\n\n        noStroke();\n        fill(\"white\");\n        rect(startRow + 1, startCol + 1, 38, 38);\n        ellipseMode(CENTER);\n        fill(color);\n        ellipse(startRow + 20, startCol + 20, 15, 15);\n    };\n\n\n    this.getNeighbor = function () {\n\n        // const neighborsIndices = [\n        //     [row - 1, col],\n        //     [row + 1, col],\n        //     [row, col - 1],\n        //     [row, col + 1]            \n        // ]\n        // console.log(row)\n        // console.log(col)\n        // console.log(grid)\n\n        const top = grid[row - 1];\n        const right = grid[row + 1];\n        const bottom = grid[row];\n        const left = grid[row];\n\n        const neighbors = []\n\n        if (top) {\n            neighbors.push(grid[row - 1][col]);\n        }\n\n        if (right) {\n            neighbors.push(grid[row + 1][col]);\n        }\n\n        if (bottom) {\n            neighbors.push(grid[row][col - 1]);\n        }\n\n        if (left) {\n            neighbors.push(grid[row][col + 1]);\n        }\n\n\n        // const neighbors = [\n        //     grid[row - 1][col],\n        //     grid[row + 1][col],\n        //     grid[row][col - 1],\n        //     grid[row][col + 1]\n        // ]\n        //  const neighborsIndices = [\n        //     [row - 1, col],\n        //     [row + 1, col],\n        //     [row, col - 1],\n        //     [row, col + 1]            \n        // ]\n\n        // const neighbors = [];\n\n        // const validateIdx = function (idx) {\n        //     idx >= 0 && idx < 20\n        // }\n        // for(let i = 0; i < neighborsIndices.length; i++){\n        //     if(validateIdx(neighborsIndices[i][0]) && validateIdx(neighborsIndices[i][1])){\n        //         neighbors.push(grid[neighborsIndices[i][0]][neighborsIndices[i][1]])\n        //     }\n        // }\n\n\n        // let top = [(row - 1), col];\n        // validateIdx(top);\n        // let right = [row, (col+1)];\n        // validateIdx(right);\n        // let bottom = [(row + 1), col];\n        // validateIdx(bottom);\n        // let left = [row, (col - 1)];\n        // validateIdx(left);\n        // console.log(\"neighbors\")\n        // console.log(neighbors)\n\n        const validNeighbors = [];\n\n        // for(let i = 0; i < neighbors.length; i++){\n        //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n        //         validNeighbors.push(neighbors[i]);\n        //     }\n        // }\n\n        // const validNeighbors = neighbors.filter(neighbor => {\n        //     // let x = neighbor[0];\n        //     // let y = neighbor[1];\n\n        //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n        //         return neighbor;\n        //     }\n        // }\n\n        // const validateNeighbors = function(neighbor) {\n        //     if(!neighbor){\n        //         return false;\n        //     }\n        //     // let x = neighbor[0];\n        //     // let y = neighbor[1];\n\n        //     if(neighbor.row < 20 || neighbor.row >=0){\n        //         return false;\n        //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n        //         return false;\n        //     } else{\n        //         return true\n        //     }\n\n        // }\n\n        // const validateNeighbors = function(neighbor){\n        //     console.log(neighbor)\n        //     neighbor\n        // }\n\n        // const validNeighbors = neighbors.filter(validateNeighbors);\n\n        // for (let i = 0; i < neighbors.length; i++) {\n        //     if (neighbors[i] && !(neighbors[i].visited)) {\n        //         if(neighbors[i].row < 20 && neighbors[i].row >=0){\n        //             if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n        //                 validNeighbors.push(neighbors[i])\n        //             }\n        //         }\n        //     }\n        // }\n\n        for (let i = 0; i < neighbors.length; i++) {\n            if (neighbors[i] && !(neighbors[i].visited)) {\n                // if(neighbors[i].row < 20 && neighbors[i].row >=0){\n                //     if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n                validNeighbors.push(neighbors[i])\n                // }\n                // }\n            }\n        }\n\n\n        // console.log(\"valid\")\n        // console.log(validNeighbors)\n\n        let nextCell;\n\n        if (validNeighbors.length > 0) {\n            nextCell = this.chooseRandomNeighbor(validNeighbors);\n            return nextCell;\n        } else {\n            return undefined;\n        }\n        // let nextCell = \n\n        // //need to check if nextCell is true bc it could be undefined at the edges\n        // while(nextCell && nextCell.visited){\n        //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n        //     if(nextCell && !nextCell.visited){\n        //         return nextCell\n        //     }\n        // }\n\n        // if (nextCell) {\n        //     rect(startRow, startCol, 40, 40)\n        //     fill(\"purple\");\n        // }\n        // console.log(nextCell)\n        // return nextCell;\n\n    }\n\n    this.chooseRandomNeighbor = function (validNeighbors) {\n        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)]\n    }\n\n}\n\nmodule.exports = Cell;\n\n// const Wall = require('./wall');\n\n// function Cell(row, col, grid) {\n//     this.row = row;\n//     this.col = col;\n//     this.grid = grid;\n//     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n//     // this.walls = []\n//     this.visited = false;\n\n//     // [1, 2, 3, 4].forEach(() => this.walls.push(new Wall()));\n\n//     this.highlight = function(){\n//         // console.log(this.row, this.col);\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n//         noStroke();\n//         fill(\"purple\");\n//         rect(startRow, startCol, 40, 40)\n//     }\n\n//     this.render = function () {\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n\n//         // x, y, width, height\n//         // rect(startX, startY, 40, 40)\n//         // noFill();\n\n//         for (let i = 0; i < this.walls.length; i++) {\n//             if(this.walls[i].present){\n//                 this.walls[i].render(i, startRow, startCol);\n//             } else {\n//                 this.walls[i].derender(i, startRow, startCol);\n//             }\n//         }\n\n\n//         if (this.visited) {\n//             noStroke();\n//             fill(\"white\");\n//             rect(startRow+1, startCol+1, 38, 38)\n//         }\n\n\n//     }\n\n\n//     this.getNeighbor = function () {\n\n//         // const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n//         // console.log(row)\n//         // console.log(col)\n//         // console.log(grid)\n\n//         const top = grid[row - 1];\n//         const right = grid[row + 1];\n//         const bottom = grid[row];\n//         const left = grid[row];\n\n//         const neighbors = []\n\n//         if(top){\n//             neighbors.push(grid[row - 1][col]);\n//         }\n\n//         if(right){\n//             neighbors.push(grid[row + 1][col]);\n//         }\n\n//         if (bottom) {\n//             neighbors.push(grid[row][col - 1]);\n//         }\n\n//         if (left) {\n//             neighbors.push(grid[row][col + 1]);\n//         }\n\n\n//         // const neighbors = [\n//         //     grid[row - 1][col],\n//         //     grid[row + 1][col],\n//         //     grid[row][col - 1],\n//         //     grid[row][col + 1]\n//         // ]\n//         //  const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n\n//         // const neighbors = [];\n\n//         // const validateIdx = function (idx) {\n//         //     idx >= 0 && idx < 20\n//         // }\n//         // for(let i = 0; i < neighborsIndices.length; i++){\n//         //     if(validateIdx(neighborsIndices[i][0]) && validateIdx(neighborsIndices[i][1])){\n//         //         neighbors.push(grid[neighborsIndices[i][0]][neighborsIndices[i][1]])\n//         //     }\n//         // }\n\n\n//         // let top = [(row - 1), col];\n//         // validateIdx(top);\n//         // let right = [row, (col+1)];\n//         // validateIdx(right);\n//         // let bottom = [(row + 1), col];\n//         // validateIdx(bottom);\n//         // let left = [row, (col - 1)];\n//         // validateIdx(left);\n//         // console.log(\"neighbors\")\n//         // console.log(neighbors)\n\n//         const validNeighbors = [];\n\n//         // for(let i = 0; i < neighbors.length; i++){\n//         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n//         //         validNeighbors.push(neighbors[i]);\n//         //     }\n//         // }\n\n//         // const validNeighbors = neighbors.filter(neighbor => {\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n//         //         return neighbor;\n//         //     }\n//         // }\n\n//         // const validateNeighbors = function(neighbor) {\n//         //     if(!neighbor){\n//         //         return false;\n//         //     }\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if(neighbor.row < 20 || neighbor.row >=0){\n//         //         return false;\n//         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n//         //         return false;\n//         //     } else{\n//         //         return true\n//         //     }\n\n//         // }\n\n//         // const validateNeighbors = function(neighbor){\n//         //     console.log(neighbor)\n//         //     neighbor\n//         // }\n\n//         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n//         // for (let i = 0; i < neighbors.length; i++) {\n//         //     if (neighbors[i] && !(neighbors[i].visited)) {\n//         //         if(neighbors[i].row < 20 && neighbors[i].row >=0){\n//         //             if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n//         //                 validNeighbors.push(neighbors[i])\n//         //             }\n//         //         }\n//         //     }\n//         // }\n\n//           for (let i = 0; i < neighbors.length; i++) {\n//             if (neighbors[i] && !(neighbors[i].visited)) {\n//                 // if(neighbors[i].row < 20 && neighbors[i].row >=0){\n//                 //     if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n//                         validNeighbors.push(neighbors[i])\n//                     // }\n//                 // }\n//             }\n//         }\n\n\n//         // console.log(\"valid\")\n//         // console.log(validNeighbors)\n\n//         let nextCell;\n\n//         if (validNeighbors.length > 0) {\n//             nextCell = this.chooseRandomNeighbor(validNeighbors);\n//             return nextCell;\n//         } else{\n//             return undefined;\n//         }\n//         // let nextCell = \n\n//         // //need to check if nextCell is true bc it could be undefined at the edges\n//         // while(nextCell && nextCell.visited){\n//         //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n//         //     if(nextCell && !nextCell.visited){\n//         //         return nextCell\n//         //     }\n//         // }\n\n//         // if (nextCell) {\n//         //     rect(startRow, startCol, 40, 40)\n//         //     fill(\"purple\");\n//         // }\n//         // console.log(nextCell)\n//         // return nextCell;\n\n//     }\n\n//     this.chooseRandomNeighbor = function (validNeighbors) {\n//         return validNeighbors[Math.floor(Math.random() * validNeighbors.length)]\n//     }\n\n// }\n\n// module.exports = Cell;\n\n\n// const Wall = require('./wall');\n\n// function Cell(row, col, grid) {\n//     grid = grid || 0\n//     // userColor = userColor || 0\n\n//     this.row = row;\n//     this.col = col;\n//     this.grid = grid;\n//     // this.userColor = userColor;\n//     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n//     // this.walls = []\n//     this.visited = false;\n//     this.hasUser = false;\n\n//     // [1, 2, 3, 4].forEach(() => this.walls.push(new Wall()));\n\n//     this.highlight = function () {\n//         // console.log(this.row, this.col);\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n//         noStroke();\n//         fill(\"purple\");\n//         rect(startRow, startCol, 40, 40)\n//     }\n\n//     this.render = function () {\n\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n\n//         // x, y, width, height\n//         // rect(startX, startY, 40, 40)\n//         // noFill();\n\n//         for (let i = 0; i < this.walls.length; i++) {\n//             if (this.walls[i].present) {\n//                 this.walls[i].render(i, startRow, startCol);\n//             } else {\n//                 this.walls[i].derender(i, startRow, startCol);\n//             }\n//         }\n\n\n//         if (this.visited) {\n//             noStroke();\n//             fill(\"white\");\n//             rect(startRow + 1, startCol + 1, 38, 38)\n//         }\n\n//     }\n\n//     this.rerender = function (color) {\n\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n\n//         // x, y, width, height\n//         // rect(startX, startY, 40, 40)\n//         // noFill();\n\n//         for (let i = 0; i < this.walls.length; i++) {\n//             if (this.walls[i].present) {\n//                 this.walls[i].render(i, startRow, startCol);\n//             } else {\n//                 this.walls[i].derender(i, startRow, startCol);\n//             }\n//         }\n\n\n//         // if (this.visited) {\n//         //     noStroke();\n//         //     fill(\"white\");\n//         //     rect(startRow + 1, startCol + 1, 38, 38)\n//         // }\n\n//         if (this.hasUser) {\n//             noStroke();\n//             fill(\"white\");\n//             rect(startRow + 1, startCol + 1, 38, 38);\n//             ellipseMode(CENTER);\n//             fill(color);\n//             ellipse(startRow + 20, startCol + 20, 15, 15);\n//         }\n\n//     }\n\n//     // this.resetRender = function(){\n//     //     this.render()\n//     // }\n\n\n//     this.getNeighbor = function () {\n\n//         // const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n//         // console.log(row)\n//         // console.log(col)\n//         // console.log(grid)\n\n//         const top = grid[row - 1];\n//         const right = grid[row + 1];\n//         const bottom = grid[row];\n//         const left = grid[row];\n\n//         const neighbors = []\n\n//         if (top) {\n//             neighbors.push(grid[row - 1][col]);\n//         }\n\n//         if (right) {\n//             neighbors.push(grid[row + 1][col]);\n//         }\n\n//         if (bottom) {\n//             neighbors.push(grid[row][col - 1]);\n//         }\n\n//         if (left) {\n//             neighbors.push(grid[row][col + 1]);\n//         }\n\n\n//         // const neighbors = [\n//         //     grid[row - 1][col],\n//         //     grid[row + 1][col],\n//         //     grid[row][col - 1],\n//         //     grid[row][col + 1]\n//         // ]\n//         //  const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n\n//         // const neighbors = [];\n\n//         // const validateIdx = function (idx) {\n//         //     idx >= 0 && idx < 20\n//         // }\n//         // for(let i = 0; i < neighborsIndices.length; i++){\n//         //     if(validateIdx(neighborsIndices[i][0]) && validateIdx(neighborsIndices[i][1])){\n//         //         neighbors.push(grid[neighborsIndices[i][0]][neighborsIndices[i][1]])\n//         //     }\n//         // }\n\n\n//         // let top = [(row - 1), col];\n//         // validateIdx(top);\n//         // let right = [row, (col+1)];\n//         // validateIdx(right);\n//         // let bottom = [(row + 1), col];\n//         // validateIdx(bottom);\n//         // let left = [row, (col - 1)];\n//         // validateIdx(left);\n//         // console.log(\"neighbors\")\n//         // console.log(neighbors)\n\n//         const validNeighbors = [];\n\n//         // for(let i = 0; i < neighbors.length; i++){\n//         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n//         //         validNeighbors.push(neighbors[i]);\n//         //     }\n//         // }\n\n//         // const validNeighbors = neighbors.filter(neighbor => {\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n//         //         return neighbor;\n//         //     }\n//         // }\n\n//         // const validateNeighbors = function(neighbor) {\n//         //     if(!neighbor){\n//         //         return false;\n//         //     }\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if(neighbor.row < 20 || neighbor.row >=0){\n//         //         return false;\n//         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n//         //         return false;\n//         //     } else{\n//         //         return true\n//         //     }\n\n//         // }\n\n//         // const validateNeighbors = function(neighbor){\n//         //     console.log(neighbor)\n//         //     neighbor\n//         // }\n\n//         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n//         // for (let i = 0; i < neighbors.length; i++) {\n//         //     if (neighbors[i] && !(neighbors[i].visited)) {\n//         //         if(neighbors[i].row < 20 && neighbors[i].row >=0){\n//         //             if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n//         //                 validNeighbors.push(neighbors[i])\n//         //             }\n//         //         }\n//         //     }\n//         // }\n\n//         for (let i = 0; i < neighbors.length; i++) {\n//             if (neighbors[i] && !(neighbors[i].visited)) {\n//                 // if(neighbors[i].row < 20 && neighbors[i].row >=0){\n//                 //     if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n//                 validNeighbors.push(neighbors[i])\n//                 // }\n//                 // }\n//             }\n//         }\n\n\n//         // console.log(\"valid\")\n//         // console.log(validNeighbors)\n\n//         let nextCell;\n\n//         if (validNeighbors.length > 0) {\n//             nextCell = this.chooseRandomNeighbor(validNeighbors);\n//             return nextCell;\n//         } else {\n//             return undefined;\n//         }\n//         // let nextCell = \n\n//         // //need to check if nextCell is true bc it could be undefined at the edges\n//         // while(nextCell && nextCell.visited){\n//         //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n//         //     if(nextCell && !nextCell.visited){\n//         //         return nextCell\n//         //     }\n//         // }\n\n//         // if (nextCell) {\n//         //     rect(startRow, startCol, 40, 40)\n//         //     fill(\"purple\");\n//         // }\n//         // console.log(nextCell)\n//         // return nextCell;\n\n//     }\n\n//     this.chooseRandomNeighbor = function (validNeighbors) {\n//         return validNeighbors[Math.floor(Math.random() * validNeighbors.length)]\n//     }\n\n//     this.renderUser = function(currentColor){\n//         this.hasUser = true;\n//         this.rerender(currentColor)\n//         // fill(this.userColor);\n//         // ellipse(20, 20, 15, 15);\n//     }\n\n// }\n\n// module.exports = Cell;\n\n// // const Wall = require('./wall');\n\n// // function Cell(row, col, grid) {\n// //     this.row = row;\n// //     this.col = col;\n// //     this.grid = grid;\n// //     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n// //     // this.walls = []\n// //     this.visited = false;\n\n// //     // [1, 2, 3, 4].forEach(() => this.walls.push(new Wall()));\n\n// //     this.highlight = function(){\n// //         // console.log(this.row, this.col);\n// //         const startRow = this.row * 40;\n// //         const startCol = this.col * 40;\n// //         noStroke();\n// //         fill(\"purple\");\n// //         rect(startRow, startCol, 40, 40)\n// //     }\n\n// //     this.render = function () {\n// //         const startRow = this.row * 40;\n// //         const startCol = this.col * 40;\n\n// //         // x, y, width, height\n// //         // rect(startX, startY, 40, 40)\n// //         // noFill();\n\n// //         for (let i = 0; i < this.walls.length; i++) {\n// //             if(this.walls[i].present){\n// //                 this.walls[i].render(i, startRow, startCol);\n// //             } else {\n// //                 this.walls[i].derender(i, startRow, startCol);\n// //             }\n// //         }\n\n\n// //         if (this.visited) {\n// //             noStroke();\n// //             fill(\"white\");\n// //             rect(startRow+1, startCol+1, 38, 38)\n// //         }\n\n\n// //     }\n\n\n// //     this.getNeighbor = function () {\n\n// //         // const neighborsIndices = [\n// //         //     [row - 1, col],\n// //         //     [row + 1, col],\n// //         //     [row, col - 1],\n// //         //     [row, col + 1]            \n// //         // ]\n// //         // console.log(row)\n// //         // console.log(col)\n// //         // console.log(grid)\n\n// //         const top = grid[row - 1];\n// //         const right = grid[row + 1];\n// //         const bottom = grid[row];\n// //         const left = grid[row];\n\n// //         const neighbors = []\n\n// //         if(top){\n// //             neighbors.push(grid[row - 1][col]);\n// //         }\n\n// //         if(right){\n// //             neighbors.push(grid[row + 1][col]);\n// //         }\n\n// //         if (bottom) {\n// //             neighbors.push(grid[row][col - 1]);\n// //         }\n\n// //         if (left) {\n// //             neighbors.push(grid[row][col + 1]);\n// //         }\n\n\n// //         // const neighbors = [\n// //         //     grid[row - 1][col],\n// //         //     grid[row + 1][col],\n// //         //     grid[row][col - 1],\n// //         //     grid[row][col + 1]\n// //         // ]\n// //         //  const neighborsIndices = [\n// //         //     [row - 1, col],\n// //         //     [row + 1, col],\n// //         //     [row, col - 1],\n// //         //     [row, col + 1]            \n// //         // ]\n\n// //         // const neighbors = [];\n\n// //         // const validateIdx = function (idx) {\n// //         //     idx >= 0 && idx < 20\n// //         // }\n// //         // for(let i = 0; i < neighborsIndices.length; i++){\n// //         //     if(validateIdx(neighborsIndices[i][0]) && validateIdx(neighborsIndices[i][1])){\n// //         //         neighbors.push(grid[neighborsIndices[i][0]][neighborsIndices[i][1]])\n// //         //     }\n// //         // }\n\n\n// //         // let top = [(row - 1), col];\n// //         // validateIdx(top);\n// //         // let right = [row, (col+1)];\n// //         // validateIdx(right);\n// //         // let bottom = [(row + 1), col];\n// //         // validateIdx(bottom);\n// //         // let left = [row, (col - 1)];\n// //         // validateIdx(left);\n// //         // console.log(\"neighbors\")\n// //         // console.log(neighbors)\n\n// //         const validNeighbors = [];\n\n// //         // for(let i = 0; i < neighbors.length; i++){\n// //         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n// //         //         validNeighbors.push(neighbors[i]);\n// //         //     }\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(neighbor => {\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n// //         //         return neighbor;\n// //         //     }\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor) {\n// //         //     if(!neighbor){\n// //         //         return false;\n// //         //     }\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if(neighbor.row < 20 || neighbor.row >=0){\n// //         //         return false;\n// //         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n// //         //         return false;\n// //         //     } else{\n// //         //         return true\n// //         //     }\n\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor){\n// //         //     console.log(neighbor)\n// //         //     neighbor\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n// //         // for (let i = 0; i < neighbors.length; i++) {\n// //         //     if (neighbors[i] && !(neighbors[i].visited)) {\n// //         //         if(neighbors[i].row < 20 && neighbors[i].row >=0){\n// //         //             if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n// //         //                 validNeighbors.push(neighbors[i])\n// //         //             }\n// //         //         }\n// //         //     }\n// //         // }\n\n// //           for (let i = 0; i < neighbors.length; i++) {\n// //             if (neighbors[i] && !(neighbors[i].visited)) {\n// //                 // if(neighbors[i].row < 20 && neighbors[i].row >=0){\n// //                 //     if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n// //                         validNeighbors.push(neighbors[i])\n// //                     // }\n// //                 // }\n// //             }\n// //         }\n\n\n// //         // console.log(\"valid\")\n// //         // console.log(validNeighbors)\n\n// //         let nextCell;\n\n// //         if (validNeighbors.length > 0) {\n// //             nextCell = this.chooseRandomNeighbor(validNeighbors);\n// //             return nextCell;\n// //         } else{\n// //             return undefined;\n// //         }\n// //         // let nextCell = \n\n// //         // //need to check if nextCell is true bc it could be undefined at the edges\n// //         // while(nextCell && nextCell.visited){\n// //         //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n// //         //     if(nextCell && !nextCell.visited){\n// //         //         return nextCell\n// //         //     }\n// //         // }\n\n// //         // if (nextCell) {\n// //         //     rect(startRow, startCol, 40, 40)\n// //         //     fill(\"purple\");\n// //         // }\n// //         // console.log(nextCell)\n// //         // return nextCell;\n\n// //     }\n\n// //     this.chooseRandomNeighbor = function (validNeighbors) {\n// //         return validNeighbors[Math.floor(Math.random() * validNeighbors.length)]\n// //     }\n\n// // }\n\n// // module.exports = Cell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./cell.js\n");

/***/ }),

/***/ "./game.js":
/*!*****************!*\
  !*** ./game.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const User = __webpack_require__(/*! ./user */ \"./user.js\");\n\nfunction Game(grid) {\n    this.end = [19, 19];\n    this.grid = grid;\n    this.user = new User(this.grid);\n    // this.userPos = [0, 0];\n\n    this.userRender = function () {\n        this.user.render(this.user.pos[0], this.user.pos[1]);\n    }\n\n    this.play = function () {\n        this.userMove();\n    }\n\n    this.end = function (userPos) {\n        this.user.pos === this.end\n    }\n\n    this.userMove = function () {\n\n        let userPos = this.user.pos;\n        let x = userPos[0];\n        let y = userPos[1];\n        let gridPos = this.user.gridPos;\n        let prevGridPosCell = this.grid[gridPos[0]][gridPos[1]];\n        // const keypress = event.keyCode;\n        // console.log(event);\n        if (keyIsDown(LEFT_ARROW)) {\n            // console.log(this.user.pos)\n            this.user.updatePos([\"y\", -40]);\n            this.user.updateGridPos([\"y\", -1], userPos);\n            if(!prevGridPosCell.walls[3]) {\n                this.user.render(this.user.pos[0], this.user.pos[1]);\n            }\n        }\n\n        if (keyIsDown(DOWN_ARROW)) {\n            this.user.updatePos([\"y\", 40]);\n            this.user.updateGridPos([\"y\", 1], userPos);\n\n            if (!prevGridPosCell.walls[1]) {\n                this.user.render(this.user.pos[0], this.user.pos[1]);\n            }        }\n\n        if (keyIsDown(UP_ARROW)) {\n            this.user.updatePos([\"x\", -40]);\n            this.user.updateGridPos([\"x\", -1], userPos);\n            if (!prevGridPosCell.walls[2]) {\n                this.user.render(this.user.pos[0], this.user.pos[1]);\n            }        }\n\n        if (keyIsDown(RIGHT_ARROW)) {\n            this.user.updatePos([\"x\", 40]);\n            this.user.updateGridPos([\"x\", 1], userPos);\n            if (!prevGridPosCell.walls[0]) {\n                this.user.render(this.user.pos[0], this.user.pos[1]);\n            }        }\n\n        // this.user.update();\n        // this.user.display();\n        // const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n        // let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n        // fill(currentColor);\n        // ellipse(19, 19, 15, 15);\n    }\n\n}\n\nmodule.exports = Game;\n//     this.xDimen = 900;\n//     this.yDimen = 900;\n//     this.cells = [];\n// }\n\n// Game.prototype.render = function(canvas){\n//     Game.setUp()\n// })\n\n// Game.prototype.setUp = function(mazeCanvas){\n//     const canvas = mazeCanvas.getContext(\"2d\");\n\n//     canvas.fillStyle = \"purple\";\n//     //x, y, width, height\n//     canvas.fillRect(0, 0, 800, 800);\n\n//     cols = 10; //each will be 8 x 8\n//     rows = 10;\n\n//     for(let rowNum = 0; rowNum < rows; rowNum++){\n//         for (let colNum = 0; colNum < cols, colNum++){\n//             cells.push(new Cell(rowNum, colNum))\n//         }\n//     }\n\n//     for(let i = 0; i < this.cells.length; i++){\n\n//     }\n\n\n// const User = require('./user');\n\n// function Game(){\n//     this.user = new User();\n//     this.end = [19, 19];\n//     // this.userPos = [0, 0];\n\n//     this.userRender = function(){\n//         this.user.render(this.user.pos[0], this.user.pos[1]);\n//     }\n\n//     // this.play = function(){\n//     //     this.userMove();\n//     // }\n\n//     this.end = function(userPos){\n//         this.user.pos === this.end\n//     }\n\n//     this.userMove = function(){\n//         if (keyIsDown(LEFT_ARROW)) {\n//             this.user.updatePos([\"y\", -40]);\n//             this.user.render();\n//         }\n\n//         if (keyIsDown(RIGHT_ARROW)) {\n//             this.user.updatePos([\"y\", 40]);\n//             this.user.render();\n//         }\n\n//         if (keyIsDown(UP_ARROW)) {\n//             this.user.updatePos([\"x\", -40]);\n//             this.user.render();\n//         }\n\n//         if (keyIsDown(DOWN_ARROW)) {\n//             this.user.updatePos([\"x\", 40]);\n//             this.user.render();\n//         }\n\n//         const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n//         let currentColor = colors[Math.floor(Math.random() * colors.length)];\n//         fill(currentColor);\n//         ellipse(19, 19, 15, 15);\n//     }\n\n// }\n\n// module.exports = Game;\n// //     this.xDimen = 900;\n// //     this.yDimen = 900;\n// //     this.cells = [];\n// // }\n\n// // Game.prototype.render = function(canvas){\n// //     Game.setUp()\n// // })\n\n// // Game.prototype.setUp = function(mazeCanvas){\n// //     const canvas = mazeCanvas.getContext(\"2d\");\n\n// //     canvas.fillStyle = \"purple\";\n// //     //x, y, width, height\n// //     canvas.fillRect(0, 0, 800, 800);\n\n// //     cols = 10; //each will be 8 x 8\n// //     rows = 10;\n\n// //     for(let rowNum = 0; rowNum < rows; rowNum++){\n// //         for (let colNum = 0; colNum < cols, colNum++){\n// //             cells.push(new Cell(rowNum, colNum))\n// //         }\n// //     }\n\n// //     for(let i = 0; i < this.cells.length; i++){\n\n// //     }\n\n\n\n// const User = require('./user');\n\n// function Game(grid) {\n//     this.user = new User(grid);\n//     this.end = [19, 19];\n//     this.grid = grid;\n//     // this.userPos = [0, 0];\n\n//     this.firstUserRender = function(){\n//         this.user.display()\n//     }\n\n//     this.userRender = function () {\n//         this.user.persistantDisplay(this.user.pos[0], this.user.pos[1]);\n//     }\n\n//     // this.play = function () {\n//     //     this.userMove();\n//     // }\n\n//     this.end = function (userPos) {\n//         this.user.pos === this.end\n//     }\n\n//     this.userMove = function () {\n\n//         let prevPos = this.user.pos;\n//         let x = prevPos[0];\n//         let y = prevPos[1];\n//         let prevCell = grid[prevPos[0]][prevPos[1]];\n//         // const keypress = event.keyCode;\n//         // console.log(event);\n//         if (keyIsDown(LEFT_ARROW)) {\n//             // console.log(this.user.pos)\n//             this.user.updatePos([\"y\", -40]);\n//             // this.user.updatePos([\"y\", -1], prevPos);\n//             this.user.render();\n//             // prevCell.resetRender();\n//             this.user.display(this.user.pos)\n//         }\n\n//         if (keyIsDown(RIGHT_ARROW)) {\n//             this.user.updatePos([\"y\", 40]);\n//             // this.user.updatePos([\"y\", 1], prevPos);\n//             this.user.render();\n//             // prevCell.resetRender();\n//         }\n\n//         if (keyIsDown(UP_ARROW)) {\n//             this.user.updatePos([\"x\", -40]);\n//             // this.user.updatePos([\"x\", -1], prevPos);\n//             this.user.render();\n//             // prevCell.resetRender();\n//         }\n\n//         if (keyIsDown(DOWN_ARROW)) {\n//             this.user.updatePos([\"x\", 40]);\n//             // this.user.updatePos([\"x\", 1], prevPos);\n//             this.user.render();\n//             // prevCell.resetRender();\n//         }\n\n//         // this.user.update();\n//         // this.user.display();\n//         // const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n//         // let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n//         // fill(currentColor);\n//         // ellipse(19, 19, 15, 15);\n//     }\n\n// }\n\n// module.exports = Game;\n// //     this.xDimen = 900;\n// //     this.yDimen = 900;\n// //     this.cells = [];\n// // }\n\n// // Game.prototype.render = function(canvas){\n// //     Game.setUp()\n// // })\n\n// // Game.prototype.setUp = function(mazeCanvas){\n// //     const canvas = mazeCanvas.getContext(\"2d\");\n\n// //     canvas.fillStyle = \"purple\";\n// //     //x, y, width, height\n// //     canvas.fillRect(0, 0, 800, 800);\n\n// //     cols = 10; //each will be 8 x 8\n// //     rows = 10;\n\n// //     for(let rowNum = 0; rowNum < rows; rowNum++){\n// //         for (let colNum = 0; colNum < cols, colNum++){\n// //             cells.push(new Cell(rowNum, colNum))\n// //         }\n// //     }\n\n// //     for(let i = 0; i < this.cells.length; i++){\n\n// //     }\n\n\n// // const User = require('./user');\n\n// // function Game(){\n// //     this.user = new User();\n// //     this.end = [19, 19];\n// //     // this.userPos = [0, 0];\n\n// //     this.userRender = function(){\n// //         this.user.render(this.user.pos[0], this.user.pos[1]);\n// //     }\n\n// //     // this.play = function(){\n// //     //     this.userMove();\n// //     // }\n\n// //     this.end = function(userPos){\n// //         this.user.pos === this.end\n// //     }\n\n// //     this.userMove = function(){\n// //         if (keyIsDown(LEFT_ARROW)) {\n// //             this.user.updatePos([\"y\", -40]);\n// //             this.user.render();\n// //         }\n\n// //         if (keyIsDown(RIGHT_ARROW)) {\n// //             this.user.updatePos([\"y\", 40]);\n// //             this.user.render();\n// //         }\n\n// //         if (keyIsDown(UP_ARROW)) {\n// //             this.user.updatePos([\"x\", -40]);\n// //             this.user.render();\n// //         }\n\n// //         if (keyIsDown(DOWN_ARROW)) {\n// //             this.user.updatePos([\"x\", 40]);\n// //             this.user.render();\n// //         }\n\n// //         const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n// //         let currentColor = colors[Math.floor(Math.random() * colors.length)];\n// //         fill(currentColor);\n// //         ellipse(19, 19, 15, 15);\n// //     }\n\n// // }\n\n// // module.exports = Game;\n// // //     this.xDimen = 900;\n// // //     this.yDimen = 900;\n// // //     this.cells = [];\n// // // }\n\n// // // Game.prototype.render = function(canvas){\n// // //     Game.setUp()\n// // // })\n\n// // // Game.prototype.setUp = function(mazeCanvas){\n// // //     const canvas = mazeCanvas.getContext(\"2d\");\n\n// // //     canvas.fillStyle = \"purple\";\n// // //     //x, y, width, height\n// // //     canvas.fillRect(0, 0, 800, 800);\n\n// // //     cols = 10; //each will be 8 x 8\n// // //     rows = 10;\n\n// // //     for(let rowNum = 0; rowNum < rows; rowNum++){\n// // //         for (let colNum = 0; colNum < cols, colNum++){\n// // //             cells.push(new Cell(rowNum, colNum))\n// // //         }\n// // //     }\n\n// // //     for(let i = 0; i < this.cells.length; i++){\n\n// // //     }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./game.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nconst Cell = __webpack_require__(/*! ./cell */ \"./cell.js\");\n// const MovingObject = require('./moving_objects');\n// const User = require('./user');\nconst Game = __webpack_require__(/*! ./game */ \"./game.js\");\nconst Maze = __webpack_require__(/*! ./maze */ \"./maze.js\");\n\n// window.MovingObject = MovingObject;\n\nconst grid = [];\n\nlet current;\n\nconst stack = [];\n\nlet game;\nwindow.addEventListener(\"keypress\", (event) => (game.userMove(event)));\n\n\nlet maze;\n\nlet mapComplete = false;\n\n// const user = new User();\n\nfunction setup() {\n    createCanvas(800, 800);\n    //   cols = 10;\n    //   rows = 10;\n\n    for (let x = 0; x < 20; x++) {\n        grid[x] = [];\n        for (let y = 0; y < 20; y++) {\n            grid[x].push(new Cell(x, y, grid, stack))\n        }\n    }\n\n    let current_row = Math.floor(Math.random() * 20);\n    let current_col = Math.floor(Math.random() * 20);\n\n    current = grid[current_row][current_col];\n    game = new Game(grid);\n    maze = new Maze(current, grid, game)\n\n    //   console.log(\"current\")\n    //   console.log(current)\n\n    frameRate(100);\n\n}\n\n// const maze = new Maze(current, grid);\n\nfunction draw() {\n    // if(!mapComplete){\n    maze.draw();\n    // mapComplete = maze.mapComplete();\n    // }\n    console.log(\"finish maze\")\n    game.userMove();\n    game.userRender();\n    // game.userRender(0, 0);\n\n    // const keypress = event.keyCode;\n    // console.log(event);\n\n\n    // game.userMove();\n    // game.user.draw();\n\n    // loop();\n    // background(51)\n\n    // if(!map && !gameEnd){\n    //     if (current) {\n    //         current.visited = true;\n    //     // current.highlight();\n    //         stack.push(current);\n    //     }\n\n\n    //     // let nextCell = current.getNextCell(current.row, current.col);\n    //     let nextCell = current.getNeighbor();\n\n    //     // console.log(\"nextcell\")\n    //     // console.log(nextCell);\n\n    //     this.removeWalls = function(current, next, grid){\n    //         const changeX = current.row - next.row;\n    //         const changeY = current.col - next.col;\n\n\n    //         switch(changeX){\n    //             case 1:\n    //                 current.walls[0].present = false;  \n    //                 next.walls[2].present = false;\n    //                 break;\n    //             case -1:\n    //                 current.walls[2].present = false;\n    //                 next.walls[0].present = false;\n    //                 break;\n    //         }\n\n    //         switch (changeY) {\n    //             case 1:\n    //                 current.walls[3].present = false;\n    //                 next.walls[1].present = false;\n    //                 break;\n    //             case -1:\n    //                 current.walls[1].present = false;\n    //                 next.walls[3].present = false;\n    //                 break;\n    //         }\n\n    //         // const firstRow = grid[0];\n    //         // const lastRow = grid[19];\n\n    //         // for (let i = 0; i < firstRow.length; i++) {\n    //         //     firstRow[i].walls[3].present = true\n    //         // }\n\n    //         // for (let i = 0; i < lastRow.length; i++) {\n    //         //     lastRow[i].walls[1].present = true\n    //         // }\n\n    //         // const firstCol = grid.filter((cell) => {\n    //         //     return cell.col === 0\n    //         // })\n\n    //         // const lastCol = grid.filter((cell) => {\n    //         //     return cell.col === 19\n    //         // })\n\n    //         // for (let i = 0; i < firstCol.length; i++) {\n    //         //     firstCol[i].walls[2].present = true;\n    //         // }\n\n    //         // for (let i = 0; i < lastCol.length; i++) {\n    //         //     lastCol[i].walls[0].present = true;\n    //         // }\n    //     } \n\n    //     if(nextCell){\n    //         nextCell.visited = true;\n    //         this.removeWalls(current, nextCell, grid);\n    //         current = nextCell;\n    //         // console.log(\"stack\")\n    //         // console.log(stack);\n    //     } else if(stack.length > 0){\n    //         potentialRestart = stack.pop()\n    //             while (potentialRestart && !potentialRestart.getNeighbor()){\n    //                 if(!stack.length){\n    //                     potentialRestart.visited = true\n    //                     map = true;\n    //                     noLoop();\n    //                     break;\n    //                 } else {\n    //                     potentialRestart = stack.pop();\n    //                 }\n    //             }\n    //             current = potentialRestart;\n    //             // console.log(current)\n    //     // } else if(allVisited) {\n    //     //     noLoop();\n    //     }\n\n\n    //     for (let i = 0; i < grid.length; i++) {\n    //         for (let j = 0; j < grid[i].length; j++) {\n    //             grid[i][j].render();\n    //         }\n    //     }\n\n    //     game.userRender();\n    // } else if(map && !gameEnd){\n    //     // loop()\n    //     console.log(\"hi\")\n    //     game.userRender();\n    //     // game.userMove();\n    //     keyPressed();\n\n    //     for (let i = 0; i < grid.length; i++) {\n    //         for (let j = 0; j < grid[i].length; j++) {\n    //             grid[i][j].render();\n    //         }\n    //     }\n\n    // }\n\n    // // current.highlight();\n\n    // function keyPressed(){\n    //     // loop();\n    //     game.userMove();\n    //     // loop()        \n    //     return false;\n    // }\n\n    // keyPressed();\n\n    // // user.render();\n\n\n\n    // // redraw();\n\n    // // while (!game.end()){\n    // //     game.userMove()\n    // // }\n\n}\n\n\n// function Cell(row, col) {\n//     this.row = row;\n//     this.col = col;\n//     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n//     this.visited = false;\n\n//     this.render = function () {\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n\n//         // x, y, width, height\n//         // rect(startX, startY, 40, 40)\n//         // noFill();\n//         for(let i = 0; i < this.walls.length; i++){\n//             this.walls[i].render(i, startRow, startCol);\n//         }\n\n//         if(this.visited){\n//             rect(startRow, startCol, 40, 40)\n//             fill(\"green\");\n//         }\n\n//     }\n\n//     this.getNeighbor = function(){\n\n//         // const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n\n//         const neighbors = [\n//             grid[row - 1][col],\n//             grid[row + 1][col],\n//             grid[row][col - 1],\n//             grid[row][col + 1]            \n//         ]\n\n//         // const neighbors = [];\n\n//         // const validateIdx = function (idxArr) {\n//         //     if(idxArr.every((idx) => {\n//         //         return idx < 20 && idx >= 0}\n//         //         )){\n\n//         //         neighbors.push(idxArr);\n//         //     }\n//         // }\n\n//         // let top = [(row - 1), col];\n//         // validateIdx(top);\n//         // let right = [row, (col+1)];\n//         // validateIdx(right);\n//         // let bottom = [(row + 1), col];\n//         // validateIdx(bottom);\n//         // let left = [row, (col - 1)];\n//         // validateIdx(left);\n\n//         console.log(neighbors)\n\n//         const validNeighbors = [];\n\n//         // for(let i = 0; i < neighbors.length; i++){\n//         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n//         //         validNeighbors.push(neighbors[i]);\n//         //     }\n//         // }\n\n//         // const validNeighbors = neighbors.filter(neighbor => {\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n//         //         return neighbor;\n//         //     }\n//         // }\n\n//         // const validateNeighbors = function(neighbor) {\n//         //     if(!neighbor){\n//         //         return false;\n//         //     }\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if(neighbor.row < 20 || neighbor.row >=0){\n//         //         return false;\n//         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n//         //         return false;\n//         //     } else{\n//         //         return true\n//         //     }\n\n//         // }\n\n//         // const validateNeighbors = function(neighbor){\n//         //     console.log(neighbor)\n//         //     neighbor\n//         // }\n\n//         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n//         for(let i = 0; i < neighbors.length; i++){\n//             if(neighbors[i] && !(neighbors[i].visited)){\n//                 validNeighbors.push(neighbors[i])\n//             }\n//         }\n\n\n//         console.log(\"valid\") \n//         console.log(validNeighbors)\n\n//         let nextCell;\n\n//         if(validNeighbors.length > 0){\n//             nextCell = this.chooseRandomNeighbor(validNeighbors);\n//             return nextCell;\n//         }\n//         // let nextCell = \n\n//         // //need to check if nextCell is true bc it could be undefined at the edges\n//         // while(nextCell && nextCell.visited){\n//             //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n//             //     if(nextCell && !nextCell.visited){\n//                 //         return nextCell\n//                 //     }\n//                 // }\n\n//                 // if (nextCell) {\n//                     //     rect(startRow, startCol, 40, 40)\n//                     //     fill(\"purple\");\n//                     // }\n//                     // console.log(nextCell)\n//                     // return nextCell;\n\n//     }\n\n//     this.chooseRandomNeighbor = function(validNeighbors) {\n//        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)] \n//     }\n\n// }\n\n// function Wall(){\n//     this.present = true;\n\n//     this.render = function(i, x, y){\n//         stroke(255);\n//         switch(i){\n//             case 0: \n//                 line(x, y, x, y + 40)\n//             case 1:\n//                 line(x, y + 40, x + 40, y + 40)\n//             case 2: \n//                 line(x + 40, y + 40, x + 40, y)\n//             case 3:\n//                 line(x + 40, y, x, y)\n//         }\n//     }\n// }\n\nwindow.setup = setup;\n\nwindow.draw = draw;\n\n//p5 cannot find the functions, \n//so we need to set it to the window so the fx can be found \n\n// const Cell = require('./cell');\n// // const MovingObject = require('./moving_objects');\n// // const User = require('./user');\n// const Game = require('./game');\n\n// // window.MovingObject = MovingObject;\n\n// const grid = [];\n\n// let current;\n\n// const stack = [];\n\n// let game = new Game();\n\n// let map = false;\n\n// let gameEnd = false;\n\n// // const user = new User();\n\n// function setup() {\n//   createCanvas(800, 800);\n// //   cols = 10;\n// //   rows = 10;\n\n//   for(let x = 0; x < 20; x++){\n//       grid[x] = [];\n//       for(let y = 0; y < 20; y++){\n//         grid[x].push(new Cell(x, y, grid, stack))\n//       }\n//   }\n\n//   let current_row = Math.floor(Math.random() * 20);\n//   let current_col = Math.floor(Math.random() * 20);\n\n//   current = grid[current_row][current_col];\n\n//   //   console.log(\"current\")\n// //   console.log(current)\n\n//   frameRate(100);\n\n// }\n\n// function draw() {\n//     background(51)\n\n//     if(!map && !gameEnd){\n//         if (current) {\n//             current.visited = true;\n//         // current.highlight();\n//             stack.push(current);\n//         }\n\n\n//         // let nextCell = current.getNextCell(current.row, current.col);\n//         let nextCell = current.getNeighbor();\n\n//         // console.log(\"nextcell\")\n//         // console.log(nextCell);\n\n//         this.removeWalls = function(current, next, grid){\n//             const changeX = current.row - next.row;\n//             const changeY = current.col - next.col;\n\n//             // current.walls.forEach(wall => wall.present = false)\n\n\n//             switch(changeX){\n//                 case 1:\n//                     current.walls[0].present = false;  \n//                     next.walls[2].present = false;\n//                     break;\n//                 case -1:\n//                     current.walls[2].present = false;\n//                     next.walls[0].present = false;\n//                     break;\n//             }\n\n//             switch (changeY) {\n//                 case 1:\n//                     current.walls[3].present = false;\n//                     next.walls[1].present = false;\n//                     break;\n//                 case -1:\n//                     current.walls[1].present = false;\n//                     next.walls[3].present = false;\n//                     break;\n//             }\n\n//             // const firstRow = grid[0];\n//             // const lastRow = grid[19];\n\n//             // for (let i = 0; i < firstRow.length; i++) {\n//             //     firstRow[i].walls[3].present = true\n//             // }\n\n//             // for (let i = 0; i < lastRow.length; i++) {\n//             //     lastRow[i].walls[1].present = true\n//             // }\n\n//             // const firstCol = grid.filter((cell) => {\n//             //     return cell.col === 0\n//             // })\n\n//             // const lastCol = grid.filter((cell) => {\n//             //     return cell.col === 19\n//             // })\n\n//             // for (let i = 0; i < firstCol.length; i++) {\n//             //     firstCol[i].walls[2].present = true;\n//             // }\n\n//             // for (let i = 0; i < lastCol.length; i++) {\n//             //     lastCol[i].walls[0].present = true;\n//             // }\n//         } \n\n//         if(nextCell){\n//             nextCell.visited = true;\n//             this.removeWalls(current, nextCell, grid);\n//             current = nextCell;\n//             // console.log(\"stack\")\n//             // console.log(stack);\n//         } else if(stack.length > 0){\n//             potentialRestart = stack.pop()\n//                 while (potentialRestart && !potentialRestart.getNeighbor()){\n//                     if(!stack.length){\n//                         potentialRestart.visited = true\n//                         map = true;\n//                         noLoop();\n//                         break;\n//                     } else {\n//                         potentialRestart = stack.pop();\n//                     }\n//                 }\n//                 current = potentialRestart;\n//                 // console.log(current)\n//         // } else if(allVisited) {\n//         //     noLoop();\n//         }\n\n\n//         for (let i = 0; i < grid.length; i++) {\n//             for (let j = 0; j < grid[i].length; j++) {\n//                 grid[i][j].render();\n//             }\n//         }\n\n//         game.userRender();\n//     } else if(map && !gameEnd){\n//         // loop()\n//         console.log(\"hi\")\n//         game.userRender();\n//         // game.userMove();\n//         keyPressed();\n\n//     }\n\n//     // current.highlight();\n\n//     function keyPressed(){\n//         // loop();\n//         game.userMove();\n//         // loop()        \n//         return false;\n//     }\n\n//     keyPressed();\n\n//     // user.render();\n\n\n\n//     // redraw();\n\n//     // while (!game.end()){\n//     //     game.userMove()\n//     // }\n\n// }\n\n// // function Cell(row, col) {\n// //     this.row = row;\n// //     this.col = col;\n// //     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n// //     this.visited = false;\n\n// //     this.render = function () {\n// //         const startRow = this.row * 40;\n// //         const startCol = this.col * 40;\n\n// //         // x, y, width, height\n// //         // rect(startX, startY, 40, 40)\n// //         // noFill();\n// //         for(let i = 0; i < this.walls.length; i++){\n// //             this.walls[i].render(i, startRow, startCol);\n// //         }\n\n// //         if(this.visited){\n// //             rect(startRow, startCol, 40, 40)\n// //             fill(\"green\");\n// //         }\n\n// //     }\n\n// //     this.getNeighbor = function(){\n\n// //         // const neighborsIndices = [\n// //         //     [row - 1, col],\n// //         //     [row + 1, col],\n// //         //     [row, col - 1],\n// //         //     [row, col + 1]            \n// //         // ]\n\n// //         const neighbors = [\n// //             grid[row - 1][col],\n// //             grid[row + 1][col],\n// //             grid[row][col - 1],\n// //             grid[row][col + 1]            \n// //         ]\n\n// //         // const neighbors = [];\n\n// //         // const validateIdx = function (idxArr) {\n// //         //     if(idxArr.every((idx) => {\n// //         //         return idx < 20 && idx >= 0}\n// //         //         )){\n\n// //         //         neighbors.push(idxArr);\n// //         //     }\n// //         // }\n\n// //         // let top = [(row - 1), col];\n// //         // validateIdx(top);\n// //         // let right = [row, (col+1)];\n// //         // validateIdx(right);\n// //         // let bottom = [(row + 1), col];\n// //         // validateIdx(bottom);\n// //         // let left = [row, (col - 1)];\n// //         // validateIdx(left);\n\n// //         console.log(neighbors)\n\n// //         const validNeighbors = [];\n\n// //         // for(let i = 0; i < neighbors.length; i++){\n// //         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n// //         //         validNeighbors.push(neighbors[i]);\n// //         //     }\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(neighbor => {\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n// //         //         return neighbor;\n// //         //     }\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor) {\n// //         //     if(!neighbor){\n// //         //         return false;\n// //         //     }\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if(neighbor.row < 20 || neighbor.row >=0){\n// //         //         return false;\n// //         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n// //         //         return false;\n// //         //     } else{\n// //         //         return true\n// //         //     }\n\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor){\n// //         //     console.log(neighbor)\n// //         //     neighbor\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n// //         for(let i = 0; i < neighbors.length; i++){\n// //             if(neighbors[i] && !(neighbors[i].visited)){\n// //                 validNeighbors.push(neighbors[i])\n// //             }\n// //         }\n\n\n// //         console.log(\"valid\") \n// //         console.log(validNeighbors)\n\n// //         let nextCell;\n\n// //         if(validNeighbors.length > 0){\n// //             nextCell = this.chooseRandomNeighbor(validNeighbors);\n// //             return nextCell;\n// //         }\n// //         // let nextCell = \n\n// //         // //need to check if nextCell is true bc it could be undefined at the edges\n// //         // while(nextCell && nextCell.visited){\n// //             //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n// //             //     if(nextCell && !nextCell.visited){\n// //                 //         return nextCell\n// //                 //     }\n// //                 // }\n\n// //                 // if (nextCell) {\n// //                     //     rect(startRow, startCol, 40, 40)\n// //                     //     fill(\"purple\");\n// //                     // }\n// //                     // console.log(nextCell)\n// //                     // return nextCell;\n\n// //     }\n\n// //     this.chooseRandomNeighbor = function(validNeighbors) {\n// //        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)] \n// //     }\n\n// // }\n\n// // function Wall(){\n// //     this.present = true;\n\n// //     this.render = function(i, x, y){\n// //         stroke(255);\n// //         switch(i){\n// //             case 0: \n// //                 line(x, y, x, y + 40)\n// //             case 1:\n// //                 line(x, y + 40, x + 40, y + 40)\n// //             case 2: \n// //                 line(x + 40, y + 40, x + 40, y)\n// //             case 3:\n// //                 line(x + 40, y, x, y)\n// //         }\n// //     }\n// // }\n\n// window.setup = setup;\n\n// window.draw = draw;\n\n// //p5 cannot find the functions, \n// //so we need to set it to the window so the fx can be found \n\n// const Cell = require('./cell');\n// // const MovingObject = require('./moving_objects');\n// // const User = require('./user');\n// const Game = require('./game');\n// const Maze = require('./maze');\n\n// // window.MovingObject = MovingObject;\n\n// const grid = [];\n\n// let current;\n\n// const stack = [];\n\n// let game;\n// window.addEventListener(\"keypress\", (event) => (game.userMove(event)));\n\n\n// let maze;\n\n// let mapComplete = false;\n\n// // const user = new User();\n\n// function setup() {\n//     createCanvas(800, 800);\n//     //   cols = 10;\n//     //   rows = 10;\n\n//     for (let x = 0; x < 20; x++) {\n//         grid[x] = [];\n//         for (let y = 0; y < 20; y++) {\n//             grid[x].push(new Cell(x, y, grid, stack))\n//         }\n//     }\n\n//     let current_row = Math.floor(Math.random() * 20);\n//     let current_col = Math.floor(Math.random() * 20);\n\n//     current = grid[current_row][current_col];\n//     game = new Game(grid);\n//     maze = new Maze(current, grid, game);\n\n//     //   console.log(\"current\")\n//     //   console.log(current)\n\n//     frameRate(100);\n\n// }\n\n// // const maze = new Maze(current, grid);\n\n// function draw() {\n//     // if(!mapComplete){\n//     game.firstUserRender();\n//     maze.draw();\n//     // mapComplete = maze.mapComplete();\n//     // }\n//     // console.log(\"finish maze\")\n//     game.userMove();\n//     game.userRender();\n//     // console.log(game.user.pos)\n//     // game.userRender(0, 0);\n\n//     // const keypress = event.keyCode;\n//     // console.log(event);\n\n\n//     // game.userMove();\n//     // game.user.draw();\n\n//     // loop();\n//     // background(51)\n\n//     // if(!map && !gameEnd){\n//     //     if (current) {\n//     //         current.visited = true;\n//     //     // current.highlight();\n//     //         stack.push(current);\n//     //     }\n\n\n//     //     // let nextCell = current.getNextCell(current.row, current.col);\n//     //     let nextCell = current.getNeighbor();\n\n//     //     // console.log(\"nextcell\")\n//     //     // console.log(nextCell);\n\n//     //     this.removeWalls = function(current, next, grid){\n//     //         const changeX = current.row - next.row;\n//     //         const changeY = current.col - next.col;\n\n\n//     //         switch(changeX){\n//     //             case 1:\n//     //                 current.walls[0].present = false;  \n//     //                 next.walls[2].present = false;\n//     //                 break;\n//     //             case -1:\n//     //                 current.walls[2].present = false;\n//     //                 next.walls[0].present = false;\n//     //                 break;\n//     //         }\n\n//     //         switch (changeY) {\n//     //             case 1:\n//     //                 current.walls[3].present = false;\n//     //                 next.walls[1].present = false;\n//     //                 break;\n//     //             case -1:\n//     //                 current.walls[1].present = false;\n//     //                 next.walls[3].present = false;\n//     //                 break;\n//     //         }\n\n//     //         // const firstRow = grid[0];\n//     //         // const lastRow = grid[19];\n\n//     //         // for (let i = 0; i < firstRow.length; i++) {\n//     //         //     firstRow[i].walls[3].present = true\n//     //         // }\n\n//     //         // for (let i = 0; i < lastRow.length; i++) {\n//     //         //     lastRow[i].walls[1].present = true\n//     //         // }\n\n//     //         // const firstCol = grid.filter((cell) => {\n//     //         //     return cell.col === 0\n//     //         // })\n\n//     //         // const lastCol = grid.filter((cell) => {\n//     //         //     return cell.col === 19\n//     //         // })\n\n//     //         // for (let i = 0; i < firstCol.length; i++) {\n//     //         //     firstCol[i].walls[2].present = true;\n//     //         // }\n\n//     //         // for (let i = 0; i < lastCol.length; i++) {\n//     //         //     lastCol[i].walls[0].present = true;\n//     //         // }\n//     //     } \n\n//     //     if(nextCell){\n//     //         nextCell.visited = true;\n//     //         this.removeWalls(current, nextCell, grid);\n//     //         current = nextCell;\n//     //         // console.log(\"stack\")\n//     //         // console.log(stack);\n//     //     } else if(stack.length > 0){\n//     //         potentialRestart = stack.pop()\n//     //             while (potentialRestart && !potentialRestart.getNeighbor()){\n//     //                 if(!stack.length){\n//     //                     potentialRestart.visited = true\n//     //                     map = true;\n//     //                     noLoop();\n//     //                     break;\n//     //                 } else {\n//     //                     potentialRestart = stack.pop();\n//     //                 }\n//     //             }\n//     //             current = potentialRestart;\n//     //             // console.log(current)\n//     //     // } else if(allVisited) {\n//     //     //     noLoop();\n//     //     }\n\n\n//     //     for (let i = 0; i < grid.length; i++) {\n//     //         for (let j = 0; j < grid[i].length; j++) {\n//     //             grid[i][j].render();\n//     //         }\n//     //     }\n\n//     //     game.userRender();\n//     // } else if(map && !gameEnd){\n//     //     // loop()\n//     //     console.log(\"hi\")\n//     //     game.userRender();\n//     //     // game.userMove();\n//     //     keyPressed();\n\n//     //     for (let i = 0; i < grid.length; i++) {\n//     //         for (let j = 0; j < grid[i].length; j++) {\n//     //             grid[i][j].render();\n//     //         }\n//     //     }\n\n//     // }\n\n//     // // current.highlight();\n\n//     // function keyPressed(){\n//     //     // loop();\n//     //     game.userMove();\n//     //     // loop()        \n//     //     return false;\n//     // }\n\n//     // keyPressed();\n\n//     // // user.render();\n\n\n\n//     // // redraw();\n\n//     // // while (!game.end()){\n//     // //     game.userMove()\n//     // // }\n\n// }\n\n\n// // function Cell(row, col) {\n// //     this.row = row;\n// //     this.col = col;\n// //     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n// //     this.visited = false;\n\n// //     this.render = function () {\n// //         const startRow = this.row * 40;\n// //         const startCol = this.col * 40;\n\n// //         // x, y, width, height\n// //         // rect(startX, startY, 40, 40)\n// //         // noFill();\n// //         for(let i = 0; i < this.walls.length; i++){\n// //             this.walls[i].render(i, startRow, startCol);\n// //         }\n\n// //         if(this.visited){\n// //             rect(startRow, startCol, 40, 40)\n// //             fill(\"green\");\n// //         }\n\n// //     }\n\n// //     this.getNeighbor = function(){\n\n// //         // const neighborsIndices = [\n// //         //     [row - 1, col],\n// //         //     [row + 1, col],\n// //         //     [row, col - 1],\n// //         //     [row, col + 1]            \n// //         // ]\n\n// //         const neighbors = [\n// //             grid[row - 1][col],\n// //             grid[row + 1][col],\n// //             grid[row][col - 1],\n// //             grid[row][col + 1]            \n// //         ]\n\n// //         // const neighbors = [];\n\n// //         // const validateIdx = function (idxArr) {\n// //         //     if(idxArr.every((idx) => {\n// //         //         return idx < 20 && idx >= 0}\n// //         //         )){\n\n// //         //         neighbors.push(idxArr);\n// //         //     }\n// //         // }\n\n// //         // let top = [(row - 1), col];\n// //         // validateIdx(top);\n// //         // let right = [row, (col+1)];\n// //         // validateIdx(right);\n// //         // let bottom = [(row + 1), col];\n// //         // validateIdx(bottom);\n// //         // let left = [row, (col - 1)];\n// //         // validateIdx(left);\n\n// //         console.log(neighbors)\n\n// //         const validNeighbors = [];\n\n// //         // for(let i = 0; i < neighbors.length; i++){\n// //         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n// //         //         validNeighbors.push(neighbors[i]);\n// //         //     }\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(neighbor => {\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n// //         //         return neighbor;\n// //         //     }\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor) {\n// //         //     if(!neighbor){\n// //         //         return false;\n// //         //     }\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if(neighbor.row < 20 || neighbor.row >=0){\n// //         //         return false;\n// //         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n// //         //         return false;\n// //         //     } else{\n// //         //         return true\n// //         //     }\n\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor){\n// //         //     console.log(neighbor)\n// //         //     neighbor\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n// //         for(let i = 0; i < neighbors.length; i++){\n// //             if(neighbors[i] && !(neighbors[i].visited)){\n// //                 validNeighbors.push(neighbors[i])\n// //             }\n// //         }\n\n\n// //         console.log(\"valid\") \n// //         console.log(validNeighbors)\n\n// //         let nextCell;\n\n// //         if(validNeighbors.length > 0){\n// //             nextCell = this.chooseRandomNeighbor(validNeighbors);\n// //             return nextCell;\n// //         }\n// //         // let nextCell = \n\n// //         // //need to check if nextCell is true bc it could be undefined at the edges\n// //         // while(nextCell && nextCell.visited){\n// //             //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n// //             //     if(nextCell && !nextCell.visited){\n// //                 //         return nextCell\n// //                 //     }\n// //                 // }\n\n// //                 // if (nextCell) {\n// //                     //     rect(startRow, startCol, 40, 40)\n// //                     //     fill(\"purple\");\n// //                     // }\n// //                     // console.log(nextCell)\n// //                     // return nextCell;\n\n// //     }\n\n// //     this.chooseRandomNeighbor = function(validNeighbors) {\n// //        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)] \n// //     }\n\n// // }\n\n// // function Wall(){\n// //     this.present = true;\n\n// //     this.render = function(i, x, y){\n// //         stroke(255);\n// //         switch(i){\n// //             case 0: \n// //                 line(x, y, x, y + 40)\n// //             case 1:\n// //                 line(x, y + 40, x + 40, y + 40)\n// //             case 2: \n// //                 line(x + 40, y + 40, x + 40, y)\n// //             case 3:\n// //                 line(x + 40, y, x, y)\n// //         }\n// //     }\n// // }\n\n// window.setup = setup;\n\n// window.draw = draw;\n\n// //p5 cannot find the functions, \n// //so we need to set it to the window so the fx can be found \n\n// // const Cell = require('./cell');\n// // // const MovingObject = require('./moving_objects');\n// // // const User = require('./user');\n// // const Game = require('./game');\n\n// // // window.MovingObject = MovingObject;\n\n// // const grid = [];\n\n// // let current;\n\n// // const stack = [];\n\n// // let game = new Game();\n\n// // let map = false;\n\n// // let gameEnd = false;\n\n// // // const user = new User();\n\n// // function setup() {\n// //   createCanvas(800, 800);\n// // //   cols = 10;\n// // //   rows = 10;\n\n// //   for(let x = 0; x < 20; x++){\n// //       grid[x] = [];\n// //       for(let y = 0; y < 20; y++){\n// //         grid[x].push(new Cell(x, y, grid, stack))\n// //       }\n// //   }\n\n// //   let current_row = Math.floor(Math.random() * 20);\n// //   let current_col = Math.floor(Math.random() * 20);\n\n// //   current = grid[current_row][current_col];\n\n// //   //   console.log(\"current\")\n// // //   console.log(current)\n\n// //   frameRate(100);\n\n// // }\n\n// // function draw() {\n// //     background(51)\n\n// //     if(!map && !gameEnd){\n// //         if (current) {\n// //             current.visited = true;\n// //         // current.highlight();\n// //             stack.push(current);\n// //         }\n\n\n// //         // let nextCell = current.getNextCell(current.row, current.col);\n// //         let nextCell = current.getNeighbor();\n\n// //         // console.log(\"nextcell\")\n// //         // console.log(nextCell);\n\n// //         this.removeWalls = function(current, next, grid){\n// //             const changeX = current.row - next.row;\n// //             const changeY = current.col - next.col;\n\n// //             // current.walls.forEach(wall => wall.present = false)\n\n\n// //             switch(changeX){\n// //                 case 1:\n// //                     current.walls[0].present = false;  \n// //                     next.walls[2].present = false;\n// //                     break;\n// //                 case -1:\n// //                     current.walls[2].present = false;\n// //                     next.walls[0].present = false;\n// //                     break;\n// //             }\n\n// //             switch (changeY) {\n// //                 case 1:\n// //                     current.walls[3].present = false;\n// //                     next.walls[1].present = false;\n// //                     break;\n// //                 case -1:\n// //                     current.walls[1].present = false;\n// //                     next.walls[3].present = false;\n// //                     break;\n// //             }\n\n// //             // const firstRow = grid[0];\n// //             // const lastRow = grid[19];\n\n// //             // for (let i = 0; i < firstRow.length; i++) {\n// //             //     firstRow[i].walls[3].present = true\n// //             // }\n\n// //             // for (let i = 0; i < lastRow.length; i++) {\n// //             //     lastRow[i].walls[1].present = true\n// //             // }\n\n// //             // const firstCol = grid.filter((cell) => {\n// //             //     return cell.col === 0\n// //             // })\n\n// //             // const lastCol = grid.filter((cell) => {\n// //             //     return cell.col === 19\n// //             // })\n\n// //             // for (let i = 0; i < firstCol.length; i++) {\n// //             //     firstCol[i].walls[2].present = true;\n// //             // }\n\n// //             // for (let i = 0; i < lastCol.length; i++) {\n// //             //     lastCol[i].walls[0].present = true;\n// //             // }\n// //         } \n\n// //         if(nextCell){\n// //             nextCell.visited = true;\n// //             this.removeWalls(current, nextCell, grid);\n// //             current = nextCell;\n// //             // console.log(\"stack\")\n// //             // console.log(stack);\n// //         } else if(stack.length > 0){\n// //             potentialRestart = stack.pop()\n// //                 while (potentialRestart && !potentialRestart.getNeighbor()){\n// //                     if(!stack.length){\n// //                         potentialRestart.visited = true\n// //                         map = true;\n// //                         noLoop();\n// //                         break;\n// //                     } else {\n// //                         potentialRestart = stack.pop();\n// //                     }\n// //                 }\n// //                 current = potentialRestart;\n// //                 // console.log(current)\n// //         // } else if(allVisited) {\n// //         //     noLoop();\n// //         }\n\n\n// //         for (let i = 0; i < grid.length; i++) {\n// //             for (let j = 0; j < grid[i].length; j++) {\n// //                 grid[i][j].render();\n// //             }\n// //         }\n\n// //         game.userRender();\n// //     } else if(map && !gameEnd){\n// //         // loop()\n// //         console.log(\"hi\")\n// //         game.userRender();\n// //         // game.userMove();\n// //         keyPressed();\n\n// //     }\n\n// //     // current.highlight();\n\n// //     function keyPressed(){\n// //         // loop();\n// //         game.userMove();\n// //         // loop()        \n// //         return false;\n// //     }\n\n// //     keyPressed();\n\n// //     // user.render();\n\n\n\n// //     // redraw();\n\n// //     // while (!game.end()){\n// //     //     game.userMove()\n// //     // }\n\n// // }\n\n// // // function Cell(row, col) {\n// // //     this.row = row;\n// // //     this.col = col;\n// // //     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n// // //     this.visited = false;\n\n// // //     this.render = function () {\n// // //         const startRow = this.row * 40;\n// // //         const startCol = this.col * 40;\n\n// // //         // x, y, width, height\n// // //         // rect(startX, startY, 40, 40)\n// // //         // noFill();\n// // //         for(let i = 0; i < this.walls.length; i++){\n// // //             this.walls[i].render(i, startRow, startCol);\n// // //         }\n\n// // //         if(this.visited){\n// // //             rect(startRow, startCol, 40, 40)\n// // //             fill(\"green\");\n// // //         }\n\n// // //     }\n\n// // //     this.getNeighbor = function(){\n\n// // //         // const neighborsIndices = [\n// // //         //     [row - 1, col],\n// // //         //     [row + 1, col],\n// // //         //     [row, col - 1],\n// // //         //     [row, col + 1]            \n// // //         // ]\n\n// // //         const neighbors = [\n// // //             grid[row - 1][col],\n// // //             grid[row + 1][col],\n// // //             grid[row][col - 1],\n// // //             grid[row][col + 1]            \n// // //         ]\n\n// // //         // const neighbors = [];\n\n// // //         // const validateIdx = function (idxArr) {\n// // //         //     if(idxArr.every((idx) => {\n// // //         //         return idx < 20 && idx >= 0}\n// // //         //         )){\n\n// // //         //         neighbors.push(idxArr);\n// // //         //     }\n// // //         // }\n\n// // //         // let top = [(row - 1), col];\n// // //         // validateIdx(top);\n// // //         // let right = [row, (col+1)];\n// // //         // validateIdx(right);\n// // //         // let bottom = [(row + 1), col];\n// // //         // validateIdx(bottom);\n// // //         // let left = [row, (col - 1)];\n// // //         // validateIdx(left);\n\n// // //         console.log(neighbors)\n\n// // //         const validNeighbors = [];\n\n// // //         // for(let i = 0; i < neighbors.length; i++){\n// // //         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n// // //         //         validNeighbors.push(neighbors[i]);\n// // //         //     }\n// // //         // }\n\n// // //         // const validNeighbors = neighbors.filter(neighbor => {\n// // //         //     // let x = neighbor[0];\n// // //         //     // let y = neighbor[1];\n\n// // //         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n// // //         //         return neighbor;\n// // //         //     }\n// // //         // }\n\n// // //         // const validateNeighbors = function(neighbor) {\n// // //         //     if(!neighbor){\n// // //         //         return false;\n// // //         //     }\n// // //         //     // let x = neighbor[0];\n// // //         //     // let y = neighbor[1];\n\n// // //         //     if(neighbor.row < 20 || neighbor.row >=0){\n// // //         //         return false;\n// // //         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n// // //         //         return false;\n// // //         //     } else{\n// // //         //         return true\n// // //         //     }\n\n// // //         // }\n\n// // //         // const validateNeighbors = function(neighbor){\n// // //         //     console.log(neighbor)\n// // //         //     neighbor\n// // //         // }\n\n// // //         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n// // //         for(let i = 0; i < neighbors.length; i++){\n// // //             if(neighbors[i] && !(neighbors[i].visited)){\n// // //                 validNeighbors.push(neighbors[i])\n// // //             }\n// // //         }\n\n\n// // //         console.log(\"valid\") \n// // //         console.log(validNeighbors)\n\n// // //         let nextCell;\n\n// // //         if(validNeighbors.length > 0){\n// // //             nextCell = this.chooseRandomNeighbor(validNeighbors);\n// // //             return nextCell;\n// // //         }\n// // //         // let nextCell = \n\n// // //         // //need to check if nextCell is true bc it could be undefined at the edges\n// // //         // while(nextCell && nextCell.visited){\n// // //             //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n// // //             //     if(nextCell && !nextCell.visited){\n// // //                 //         return nextCell\n// // //                 //     }\n// // //                 // }\n\n// // //                 // if (nextCell) {\n// // //                     //     rect(startRow, startCol, 40, 40)\n// // //                     //     fill(\"purple\");\n// // //                     // }\n// // //                     // console.log(nextCell)\n// // //                     // return nextCell;\n\n// // //     }\n\n// // //     this.chooseRandomNeighbor = function(validNeighbors) {\n// // //        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)] \n// // //     }\n\n// // // }\n\n// // // function Wall(){\n// // //     this.present = true;\n\n// // //     this.render = function(i, x, y){\n// // //         stroke(255);\n// // //         switch(i){\n// // //             case 0: \n// // //                 line(x, y, x, y + 40)\n// // //             case 1:\n// // //                 line(x, y + 40, x + 40, y + 40)\n// // //             case 2: \n// // //                 line(x + 40, y + 40, x + 40, y)\n// // //             case 3:\n// // //                 line(x + 40, y, x, y)\n// // //         }\n// // //     }\n// // // }\n\n// // window.setup = setup;\n\n// // window.draw = draw;\n\n// // //p5 cannot find the functions, \n// // //so we need to set it to the window so the fx can be found //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./maze.js":
/*!*****************!*\
  !*** ./maze.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function Maze(current, grid, game) {\n  this.current = current;\n  this.grid = grid;\n  this.stack = [];\n  this.map = false;\n  this.game = game;\n\n  this.draw = function() {\n    background(51);\n\n    // if (!map && !gameEnd) {\n    if (this.current) {\n      this.current.visited = true;\n      // this.current.highlight();\n      this.stack.push(this.current);\n    }\n\n    // let nextCell = this.current.getNextCell(this.current.row, this.current.col);\n    let nextCell = this.current.getNeighbor();\n\n    // console.log(\"nextcell\")\n    // console.log(nextCell);\n\n    removeWalls = function(current, next, grid) {\n      const changeX = current.row - next.row;\n      const changeY = current.col - next.col;\n\n      // current.walls.forEach(wall => wall.present = false)\n\n      switch (changeX) {\n        case 1:\n          current.walls[0].present = false;\n          next.walls[2].present = false;\n          break;\n        case -1:\n          current.walls[2].present = false;\n          next.walls[0].present = false;\n          break;\n      }\n\n      switch (changeY) {\n        case 1:\n          current.walls[3].present = false;\n          next.walls[1].present = false;\n          break;\n        case -1:\n          current.walls[1].present = false;\n          next.walls[3].present = false;\n          break;\n      }\n\n      // const firstRow = grid[0];\n      // const lastRow = grid[19];\n\n      // for (let i = 0; i < firstRow.length; i++) {\n      //     firstRow[i].walls[3].present = true\n      // }\n\n      // for (let i = 0; i < lastRow.length; i++) {\n      //     lastRow[i].walls[1].present = true\n      // }\n\n      // const firstCol = grid.filter((cell) => {\n      //     return cell.col === 0\n      // })\n\n      // const lastCol = grid.filter((cell) => {\n      //     return cell.col === 19\n      // })\n\n      // for (let i = 0; i < firstCol.length; i++) {\n      //     firstCol[i].walls[2].present = true;\n      // }\n\n      // for (let i = 0; i < lastCol.length; i++) {\n      //     lastCol[i].walls[0].present = true;\n      // }\n    };\n\n    if (nextCell) {\n      nextCell.visited = true;\n      removeWalls(this.current, nextCell, grid);\n      this.current = nextCell;\n      // console.log(\"this.stack\")\n      // console.log(this.stack);\n    } else if (this.stack.length > 0) {\n      potentialRestart = this.stack.pop();\n      while (potentialRestart && !potentialRestart.getNeighbor()) {\n        if (!this.stack.length) {\n          potentialRestart.visited = true;\n          // game.userMove();\n          this.map = true;\n          break;\n          console.log(\"finish\");\n          if (map) {\n            console.log(\"hi\");\n            game.userMove();\n          }\n          // noLoop();\n          // break;\n        } else {\n          potentialRestart = this.stack.pop();\n        }\n      }\n      this.current = potentialRestart;\n      // console.log(this.this.current)\n      // } else if(allVisited) {\n      //     noLoop();\n    }\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        grid[i][j].render();\n      }\n    }\n\n    //     game.start();\n    // } else if (map && !gameEnd) {\n    //     game.start();\n    //     game.userMove();\n    //     // keyPressed();\n\n    // }\n\n    // // this.current.highlight();\n\n    // function keyPressed() {\n    //     game.userMove();\n    //     // redraw();\n    //     return false;\n    // }\n\n    // keyPressed();\n\n    // user.render();\n\n    // redraw();\n\n    // while (!game.end()){\n    //     game.userMove()\n    // }\n  };\n\n  // this.mapComplete = function(){\n  //     return this.map;\n  // }\n}\n\nmodule.exports = Maze;\n\n// window.draw = draw;\n\n// class Maze{\n//     constructor(current){\n//         this.current = current;\n//     }\n\n//     draw(){\n//         background(51)\n\n//         // if (!map && !gameEnd) {\n//             if (this.current) {\n//                 this.current.visited = true;\n//                 // this.current.highlight();\n//                 stack.push(this.current);\n//             }\n\n//             // let nextCell = this.current.getNextCell(this.current.row, this.current.col);\n//             let nextCell = this.current.getNeighbor();\n\n//             // console.log(\"nextcell\")\n//             // console.log(nextCell);\n\n//             removeWalls = function (this.current, next, grid) {\n//                 const changeX = this.current.row - next.row;\n//                 const changeY = this.current.col - next.col;\n\n//                 // this.current.walls.forEach(wall => wall.present = false)\n\n//                 switch (changeX) {\n//                     case 1:\n//                         this.current.walls[0].present = false;\n//                         next.walls[2].present = false;\n//                         break;\n//                     case -1:\n//                         this.current.walls[2].present = false;\n//                         next.walls[0].present = false;\n//                         break;\n//                 }\n\n//                 switch (changeY) {\n//                     case 1:\n//                         this.current.walls[3].present = false;\n//                         next.walls[1].present = false;\n//                         break;\n//                     case -1:\n//                         this.current.walls[1].present = false;\n//                         next.walls[3].present = false;\n//                         break;\n//                 }\n\n//                 // const firstRow = grid[0];\n//                 // const lastRow = grid[19];\n\n//                 // for (let i = 0; i < firstRow.length; i++) {\n//                 //     firstRow[i].walls[3].present = true\n//                 // }\n\n//                 // for (let i = 0; i < lastRow.length; i++) {\n//                 //     lastRow[i].walls[1].present = true\n//                 // }\n\n//                 // const firstCol = grid.filter((cell) => {\n//                 //     return cell.col === 0\n//                 // })\n\n//                 // const lastCol = grid.filter((cell) => {\n//                 //     return cell.col === 19\n//                 // })\n\n//                 // for (let i = 0; i < firstCol.length; i++) {\n//                 //     firstCol[i].walls[2].present = true;\n//                 // }\n\n//                 // for (let i = 0; i < lastCol.length; i++) {\n//                 //     lastCol[i].walls[0].present = true;\n//                 // }\n//             }\n\n//             if (nextCell) {\n//                 nextCell.visited = true;\n//                 this.removeWalls(this.current, nextCell, grid);\n//                 this.current = nextCell;\n//                 // console.log(\"stack\")\n//                 // console.log(stack);\n//             } else if (stack.length > 0) {\n//                 potentialRestart = stack.pop()\n//                 while (potentialRestart && !potentialRestart.getNeighbor()) {\n//                     if (!stack.length) {\n//                         potentialRestart.visited = true\n//                         map = true;\n//                         // noLoop();\n//                         // break;\n//                     } else {\n//                         potentialRestart = stack.pop();\n//                     }\n//                 }\n//                 this.current = potentialRestart;\n//                 // console.log(this.current)\n//                 // } else if(allVisited) {\n//                 //     noLoop();\n//             }\n\n//             for (let i = 0; i < grid.length; i++) {\n//                 for (let j = 0; j < grid[i].length; j++) {\n//                     grid[i][j].render();\n//                 }\n//             }\n\n//         //     game.start();\n//         // } else if (map && !gameEnd) {\n//         //     game.start();\n//         //     game.userMove();\n//         //     // keyPressed();\n\n//         // }\n\n//         // // current.highlight();\n\n//         // function keyPressed() {\n//         //     game.userMove();\n//         //     // redraw();\n//         //     return false;\n//         // }\n\n//         // keyPressed();\n\n//     // user.render();\n\n//     // redraw();\n\n//     // while (!game.end()){\n//     //     game.userMove()\n//     // }\n\n//     }\n\n// }\n\n// module.exports = Maze;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXplLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbWF6ZS5qcz8zZWI1Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIE1hemUoY3VycmVudCwgZ3JpZCwgZ2FtZSkge1xuICB0aGlzLmN1cnJlbnQgPSBjdXJyZW50O1xuICB0aGlzLmdyaWQgPSBncmlkO1xuICB0aGlzLnN0YWNrID0gW107XG4gIHRoaXMubWFwID0gZmFsc2U7XG4gIHRoaXMuZ2FtZSA9IGdhbWU7XG5cbiAgdGhpcy5kcmF3ID0gZnVuY3Rpb24oKSB7XG4gICAgYmFja2dyb3VuZCg1MSk7XG5cbiAgICAvLyBpZiAoIW1hcCAmJiAhZ2FtZUVuZCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnQpIHtcbiAgICAgIHRoaXMuY3VycmVudC52aXNpdGVkID0gdHJ1ZTtcbiAgICAgIC8vIHRoaXMuY3VycmVudC5oaWdobGlnaHQoKTtcbiAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cblxuICAgIC8vIGxldCBuZXh0Q2VsbCA9IHRoaXMuY3VycmVudC5nZXROZXh0Q2VsbCh0aGlzLmN1cnJlbnQucm93LCB0aGlzLmN1cnJlbnQuY29sKTtcbiAgICBsZXQgbmV4dENlbGwgPSB0aGlzLmN1cnJlbnQuZ2V0TmVpZ2hib3IoKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKFwibmV4dGNlbGxcIilcbiAgICAvLyBjb25zb2xlLmxvZyhuZXh0Q2VsbCk7XG5cbiAgICByZW1vdmVXYWxscyA9IGZ1bmN0aW9uKGN1cnJlbnQsIG5leHQsIGdyaWQpIHtcbiAgICAgIGNvbnN0IGNoYW5nZVggPSBjdXJyZW50LnJvdyAtIG5leHQucm93O1xuICAgICAgY29uc3QgY2hhbmdlWSA9IGN1cnJlbnQuY29sIC0gbmV4dC5jb2w7XG5cbiAgICAgIC8vIGN1cnJlbnQud2FsbHMuZm9yRWFjaCh3YWxsID0+IHdhbGwucHJlc2VudCA9IGZhbHNlKVxuXG4gICAgICBzd2l0Y2ggKGNoYW5nZVgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGN1cnJlbnQud2FsbHNbMF0ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIG5leHQud2FsbHNbMl0ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIGN1cnJlbnQud2FsbHNbMl0ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIG5leHQud2FsbHNbMF0ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGNoYW5nZVkpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGN1cnJlbnQud2FsbHNbM10ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIG5leHQud2FsbHNbMV0ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIGN1cnJlbnQud2FsbHNbMV0ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIG5leHQud2FsbHNbM10ucHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBjb25zdCBmaXJzdFJvdyA9IGdyaWRbMF07XG4gICAgICAvLyBjb25zdCBsYXN0Um93ID0gZ3JpZFsxOV07XG5cbiAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RSb3cubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICAgICBmaXJzdFJvd1tpXS53YWxsc1szXS5wcmVzZW50ID0gdHJ1ZVxuICAgICAgLy8gfVxuXG4gICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RSb3cubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICAgICBsYXN0Um93W2ldLndhbGxzWzFdLnByZXNlbnQgPSB0cnVlXG4gICAgICAvLyB9XG5cbiAgICAgIC8vIGNvbnN0IGZpcnN0Q29sID0gZ3JpZC5maWx0ZXIoKGNlbGwpID0+IHtcbiAgICAgIC8vICAgICByZXR1cm4gY2VsbC5jb2wgPT09IDBcbiAgICAgIC8vIH0pXG5cbiAgICAgIC8vIGNvbnN0IGxhc3RDb2wgPSBncmlkLmZpbHRlcigoY2VsbCkgPT4ge1xuICAgICAgLy8gICAgIHJldHVybiBjZWxsLmNvbCA9PT0gMTlcbiAgICAgIC8vIH0pXG5cbiAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RDb2wubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICAgICBmaXJzdENvbFtpXS53YWxsc1syXS5wcmVzZW50ID0gdHJ1ZTtcbiAgICAgIC8vIH1cblxuICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0Q29sLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAgICAgbGFzdENvbFtpXS53YWxsc1swXS5wcmVzZW50ID0gdHJ1ZTtcbiAgICAgIC8vIH1cbiAgICB9O1xuXG4gICAgaWYgKG5leHRDZWxsKSB7XG4gICAgICBuZXh0Q2VsbC52aXNpdGVkID0gdHJ1ZTtcbiAgICAgIHJlbW92ZVdhbGxzKHRoaXMuY3VycmVudCwgbmV4dENlbGwsIGdyaWQpO1xuICAgICAgdGhpcy5jdXJyZW50ID0gbmV4dENlbGw7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMuc3RhY2tcIilcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc3RhY2spO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBwb3RlbnRpYWxSZXN0YXJ0ID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgIHdoaWxlIChwb3RlbnRpYWxSZXN0YXJ0ICYmICFwb3RlbnRpYWxSZXN0YXJ0LmdldE5laWdoYm9yKCkpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIHBvdGVudGlhbFJlc3RhcnQudmlzaXRlZCA9IHRydWU7XG4gICAgICAgICAgLy8gZ2FtZS51c2VyTW92ZSgpO1xuICAgICAgICAgIHRoaXMubWFwID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbmlzaFwiKTtcbiAgICAgICAgICBpZiAobWFwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImhpXCIpO1xuICAgICAgICAgICAgZ2FtZS51c2VyTW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBub0xvb3AoKTtcbiAgICAgICAgICAvLyBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3RlbnRpYWxSZXN0YXJ0ID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jdXJyZW50ID0gcG90ZW50aWFsUmVzdGFydDtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGhpcy5jdXJyZW50KVxuICAgICAgLy8gfSBlbHNlIGlmKGFsbFZpc2l0ZWQpIHtcbiAgICAgIC8vICAgICBub0xvb3AoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JpZFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBncmlkW2ldW2pdLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vICAgICBnYW1lLnN0YXJ0KCk7XG4gICAgLy8gfSBlbHNlIGlmIChtYXAgJiYgIWdhbWVFbmQpIHtcbiAgICAvLyAgICAgZ2FtZS5zdGFydCgpO1xuICAgIC8vICAgICBnYW1lLnVzZXJNb3ZlKCk7XG4gICAgLy8gICAgIC8vIGtleVByZXNzZWQoKTtcblxuICAgIC8vIH1cblxuICAgIC8vIC8vIHRoaXMuY3VycmVudC5oaWdobGlnaHQoKTtcblxuICAgIC8vIGZ1bmN0aW9uIGtleVByZXNzZWQoKSB7XG4gICAgLy8gICAgIGdhbWUudXNlck1vdmUoKTtcbiAgICAvLyAgICAgLy8gcmVkcmF3KCk7XG4gICAgLy8gICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyB9XG5cbiAgICAvLyBrZXlQcmVzc2VkKCk7XG5cbiAgICAvLyB1c2VyLnJlbmRlcigpO1xuXG4gICAgLy8gcmVkcmF3KCk7XG5cbiAgICAvLyB3aGlsZSAoIWdhbWUuZW5kKCkpe1xuICAgIC8vICAgICBnYW1lLnVzZXJNb3ZlKClcbiAgICAvLyB9XG4gIH07XG5cbiAgLy8gdGhpcy5tYXBDb21wbGV0ZSA9IGZ1bmN0aW9uKCl7XG4gIC8vICAgICByZXR1cm4gdGhpcy5tYXA7XG4gIC8vIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYXplO1xuXG4vLyB3aW5kb3cuZHJhdyA9IGRyYXc7XG5cbi8vIGNsYXNzIE1hemV7XG4vLyAgICAgY29uc3RydWN0b3IoY3VycmVudCl7XG4vLyAgICAgICAgIHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XG4vLyAgICAgfVxuXG4vLyAgICAgZHJhdygpe1xuLy8gICAgICAgICBiYWNrZ3JvdW5kKDUxKVxuXG4vLyAgICAgICAgIC8vIGlmICghbWFwICYmICFnYW1lRW5kKSB7XG4vLyAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50KSB7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnZpc2l0ZWQgPSB0cnVlO1xuLy8gICAgICAgICAgICAgICAgIC8vIHRoaXMuY3VycmVudC5oaWdobGlnaHQoKTtcbi8vICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMuY3VycmVudCk7XG4vLyAgICAgICAgICAgICB9XG5cbi8vICAgICAgICAgICAgIC8vIGxldCBuZXh0Q2VsbCA9IHRoaXMuY3VycmVudC5nZXROZXh0Q2VsbCh0aGlzLmN1cnJlbnQucm93LCB0aGlzLmN1cnJlbnQuY29sKTtcbi8vICAgICAgICAgICAgIGxldCBuZXh0Q2VsbCA9IHRoaXMuY3VycmVudC5nZXROZWlnaGJvcigpO1xuXG4vLyAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm5leHRjZWxsXCIpXG4vLyAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXh0Q2VsbCk7XG5cbi8vICAgICAgICAgICAgIHJlbW92ZVdhbGxzID0gZnVuY3Rpb24gKHRoaXMuY3VycmVudCwgbmV4dCwgZ3JpZCkge1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZVggPSB0aGlzLmN1cnJlbnQucm93IC0gbmV4dC5yb3c7XG4vLyAgICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlWSA9IHRoaXMuY3VycmVudC5jb2wgLSBuZXh0LmNvbDtcblxuLy8gICAgICAgICAgICAgICAgIC8vIHRoaXMuY3VycmVudC53YWxscy5mb3JFYWNoKHdhbGwgPT4gd2FsbC5wcmVzZW50ID0gZmFsc2UpXG5cbi8vICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYW5nZVgpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LndhbGxzWzBdLnByZXNlbnQgPSBmYWxzZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQud2FsbHNbMl0ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNhc2UgLTE6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQud2FsbHNbMl0ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC53YWxsc1swXS5wcmVzZW50ID0gZmFsc2U7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgICAgICB9XG5cbi8vICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYW5nZVkpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LndhbGxzWzNdLnByZXNlbnQgPSBmYWxzZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQud2FsbHNbMV0ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNhc2UgLTE6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQud2FsbHNbMV0ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC53YWxsc1szXS5wcmVzZW50ID0gZmFsc2U7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgICAgICB9XG5cbi8vICAgICAgICAgICAgICAgICAvLyBjb25zdCBmaXJzdFJvdyA9IGdyaWRbMF07XG4vLyAgICAgICAgICAgICAgICAgLy8gY29uc3QgbGFzdFJvdyA9IGdyaWRbMTldO1xuXG4vLyAgICAgICAgICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdFJvdy5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICAgICAgICAgIC8vICAgICBmaXJzdFJvd1tpXS53YWxsc1szXS5wcmVzZW50ID0gdHJ1ZVxuLy8gICAgICAgICAgICAgICAgIC8vIH1cblxuLy8gICAgICAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdFJvdy5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICAgICAgICAgIC8vICAgICBsYXN0Um93W2ldLndhbGxzWzFdLnByZXNlbnQgPSB0cnVlXG4vLyAgICAgICAgICAgICAgICAgLy8gfVxuXG4vLyAgICAgICAgICAgICAgICAgLy8gY29uc3QgZmlyc3RDb2wgPSBncmlkLmZpbHRlcigoY2VsbCkgPT4ge1xuLy8gICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gY2VsbC5jb2wgPT09IDBcbi8vICAgICAgICAgICAgICAgICAvLyB9KVxuXG4vLyAgICAgICAgICAgICAgICAgLy8gY29uc3QgbGFzdENvbCA9IGdyaWQuZmlsdGVyKChjZWxsKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiBjZWxsLmNvbCA9PT0gMTlcbi8vICAgICAgICAgICAgICAgICAvLyB9KVxuXG4vLyAgICAgICAgICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdENvbC5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICAgICAgICAgIC8vICAgICBmaXJzdENvbFtpXS53YWxsc1syXS5wcmVzZW50ID0gdHJ1ZTtcbi8vICAgICAgICAgICAgICAgICAvLyB9XG5cbi8vICAgICAgICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RDb2wubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgbGFzdENvbFtpXS53YWxsc1swXS5wcmVzZW50ID0gdHJ1ZTtcbi8vICAgICAgICAgICAgICAgICAvLyB9XG4vLyAgICAgICAgICAgICB9XG5cbi8vICAgICAgICAgICAgIGlmIChuZXh0Q2VsbCkge1xuLy8gICAgICAgICAgICAgICAgIG5leHRDZWxsLnZpc2l0ZWQgPSB0cnVlO1xuLy8gICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlV2FsbHModGhpcy5jdXJyZW50LCBuZXh0Q2VsbCwgZ3JpZCk7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV4dENlbGw7XG4vLyAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzdGFja1wiKVxuLy8gICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YWNrKTtcbi8vICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuLy8gICAgICAgICAgICAgICAgIHBvdGVudGlhbFJlc3RhcnQgPSBzdGFjay5wb3AoKVxuLy8gICAgICAgICAgICAgICAgIHdoaWxlIChwb3RlbnRpYWxSZXN0YXJ0ICYmICFwb3RlbnRpYWxSZXN0YXJ0LmdldE5laWdoYm9yKCkpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFjay5sZW5ndGgpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHBvdGVudGlhbFJlc3RhcnQudmlzaXRlZCA9IHRydWVcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1hcCA9IHRydWU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub0xvb3AoKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrO1xuLy8gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcG90ZW50aWFsUmVzdGFydCA9IHN0YWNrLnBvcCgpO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHBvdGVudGlhbFJlc3RhcnQ7XG4vLyAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jdXJyZW50KVxuLy8gICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZihhbGxWaXNpdGVkKSB7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgIG5vTG9vcCgpO1xuLy8gICAgICAgICAgICAgfVxuXG4vLyAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyaWQubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyaWRbaV0ubGVuZ3RoOyBqKyspIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZ3JpZFtpXVtqXS5yZW5kZXIoKTtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG5cbi8vICAgICAgICAgLy8gICAgIGdhbWUuc3RhcnQoKTtcbi8vICAgICAgICAgLy8gfSBlbHNlIGlmIChtYXAgJiYgIWdhbWVFbmQpIHtcbi8vICAgICAgICAgLy8gICAgIGdhbWUuc3RhcnQoKTtcbi8vICAgICAgICAgLy8gICAgIGdhbWUudXNlck1vdmUoKTtcbi8vICAgICAgICAgLy8gICAgIC8vIGtleVByZXNzZWQoKTtcblxuLy8gICAgICAgICAvLyB9XG5cbi8vICAgICAgICAgLy8gLy8gY3VycmVudC5oaWdobGlnaHQoKTtcblxuLy8gICAgICAgICAvLyBmdW5jdGlvbiBrZXlQcmVzc2VkKCkge1xuLy8gICAgICAgICAvLyAgICAgZ2FtZS51c2VyTW92ZSgpO1xuLy8gICAgICAgICAvLyAgICAgLy8gcmVkcmF3KCk7XG4vLyAgICAgICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4vLyAgICAgICAgIC8vIH1cblxuLy8gICAgICAgICAvLyBrZXlQcmVzc2VkKCk7XG5cbi8vICAgICAvLyB1c2VyLnJlbmRlcigpO1xuXG4vLyAgICAgLy8gcmVkcmF3KCk7XG5cbi8vICAgICAvLyB3aGlsZSAoIWdhbWUuZW5kKCkpe1xuLy8gICAgIC8vICAgICBnYW1lLnVzZXJNb3ZlKClcbi8vICAgICAvLyB9XG5cbi8vICAgICB9XG5cbi8vIH1cblxuLy8gbW9kdWxlLmV4cG9ydHMgPSBNYXplO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./maze.js\n");

/***/ }),

/***/ "./user.js":
/*!*****************!*\
  !*** ./user.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function User(grid) {\n    this.row = 19;\n    this.col = 19;\n    this.radius = 10;\n    this.pos = [0, 0];\n    this.gridPos = [0, 0];\n    this.grid = grid;\n\n    const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n    let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n    this.updatePos = function (posChange) {\n        switch (posChange[0]) {\n            case \"y\":\n                let updatedX = this.pos[0] + posChange[1];\n                this.pos = [updatedX, this.pos[1]];\n            case \"x\":\n                let updatedY = this.pos[1] + posChange[1];\n                this.pos = [this.pos[1], updatedY];\n        }\n    }\n\n    this.updateGridPos = function(posChange, prevPos){\n        let prev = prevPos;\n        switch (posChange[0]) {\n            case \"y\":\n                // let updatedY = prev[1] + posChange[1];\n                // this.pos = [prev[0], updatedY];\n                let updatedY = this.gridPos[1] + posChange[1];\n                this.gridPos = [this.gridPos[0], updatedY];\n                break;\n            case \"x\":\n                // let updatedX = prev[0] + posChange[1];\n                // this.pos = [updatedX, prev[1]];\n                let updatedX = this.gridPos[0] + posChange[1];\n                this.gridPos = [updatedX, this.gridPos[1]];\n                break;\n        }\n        console.log(\"grid pos\")\n        console.log(this.gridPos)\n    }\n\n    this.render = function (x, y) {\n        // fill(currentColor);\n        // ellipse((x+20), (y+20), 15, 15);\n        let nextCell = this.grid[this.gridPos[0]][this.gridPos[1]]\n        nextCell.renderUser(currentColor);\n    }\n\n    this.draw = function () {\n        let x = this.pos[0];\n        let y = this.pos[1];\n        // const keypress = event.keyCode;\n        // console.log(event);\n        if (keyIsDown(LEFT_ARROW)) {\n            // console.log(this.user.pos)\n            this.updatePos([\"y\", -40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n\n        if (keyIsDown(RIGHT_ARROW)) {\n            this.updatePos([\"y\", 40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n\n        if (keyIsDown(UP_ARROW)) {\n            this.updatePos([\"x\", -40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n\n        if (keyIsDown(DOWN_ARROW)) {\n            this.updatePos([\"x\", 40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n    }\n}\n\nmodule.exports = User;\n\n// const Cell = require('./cell');\n\n// function User(grid) {\n//     this.row = 19;\n//     this.col = 19;\n//     this.radius = 10;\n//     this.pos = [0, 0];\n//     this.grid = grid;\n\n//     const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n//     let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n//     this.updatePos = function (posChange, prevPos) {\n//         let prev = prevPos;\n//         console.log(\"prevpos\")\n//         console.log(prev)\n//         switch (posChange[0]) {\n//             case \"y\":\n//                 // let updatedY = prev[1] + posChange[1];\n//                 // this.pos = [prev[0], updatedY];\n//                 let updatedY = this.pos[1] + posChange[1];\n//                 this.pos = [this.pos[0], updatedY];\n//                 break;\n//             case \"x\":\n//                 // let updatedX = prev[0] + posChange[1];\n//                 // this.pos = [updatedX, prev[1]];\n//                 let updatedX = this.pos[0] + posChange[1];\n//                 this.pos = [updatedX, this.pos[1]];\n//                 break;\n//         }\n//         console.log(\"newpos\")\n//         console.log(this.pos)\n//     }\n\n//     this.display = function(){\n//         fill(currentColor);\n//         ellipse((this.pos[0] + 20), (this.pos[1] + 20), 15, 15);\n\n//     }\n\n//     this.persistantDisplay = function(x, y){\n//         fill(currentColor);\n//         ellipse((x + 20), (y + 20), 15, 15);\n//     }\n\n//     this.render = function() {\n//         let currentCell = this.grid[this.pos[0]][this.pos[1]];\n//         console.log(\"cell to rerender\")\n//         console.log(currentCell)\n//         currentCell.hasUser = true;\n//         currentCell.rerender(currentColor);\n//         this.persistantDisplay()\n//         // currentCell.display(currentCell.row, currentCell.col)\n//     }\n\n//     this.draw = function () {\n//         let x = this.pos[0];\n//         let y = this.pos[1];\n//         // const keypress = event.keyCode;\n//         // console.log(event);\n//         if (keyIsDown(LEFT_ARROW)) {\n//             // console.log(this.user.pos)\n//             this.updatePos([\"y\", -40]);\n//             this.render(this.pos[0], this.pos[1]);\n//         }\n\n//         if (keyIsDown(RIGHT_ARROW)) {\n//             this.updatePos([\"y\", 40]);\n//             this.render(this.pos[0], this.pos[1]);\n//         }\n\n//         if (keyIsDown(UP_ARROW)) {\n//             this.updatePos([\"x\", -40]);\n//             this.render(this.pos[0], this.pos[1]);\n//         }\n\n//         if (keyIsDown(DOWN_ARROW)) {\n//             this.updatePos([\"x\", 40]);\n//             this.render(this.pos[0], this.pos[1]);\n//         }\n//     }\n// }\n\n// module.exports = User;\n\n// // function User(){\n// //     this.row = 19;\n// //     this.col = 19;\n// //     this.radius = 10;\n// //     this.pos = [0, 0]\n\n// //     const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n// //     let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n\n// //     this.updatePos = function(posChange){\n// //         switch(posChange[0]){\n// //             case \"x\":\n// //                 let updatedX = this.pos[0] + posChange[1];\n// //                 this.pos = [updatedX, this.pos[1]];\n// //             case \"y\":\n// //                 let updatedY = this.pos[1] + posChange[1];\n// //                 this.pos = [this.pos[1], updatedY]; \n// //         }\n// //     }\n\n\n// //     this.render = function(x, y) {\n\n// //         fill(currentColor);\n// //         ellipse(19, 19, 15, 15);\n// //     }\n// // }\n\n// // module.exports = User;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./user.js\n");

/***/ }),

/***/ "./wall.js":
/*!*****************!*\
  !*** ./wall.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Wall {\n  constructor() {\n    this.present = true;\n  }\n\n  render(wallPos, x, y) {\n    stroke(\"black\");\n    strokeWeight(3);\n    switch (wallPos) {\n      case 0:\n        line(x, y, x, y + 40);\n      case 1:\n        line(x, y + 40, x + 40, y + 40);\n      case 2:\n        line(x + 40, y + 40, x + 40, y);\n      case 3:\n        line(x + 40, y, x, y);\n    }\n\n  }\n\n  derender(wallPos, x, y) {\n    stroke(\"white\");\n    switch (wallPos) {\n      case 0:\n        line(x, y, x, y + 40);\n      case 1:\n        line(x, y + 40, x + 40, y + 40);\n      case 2:\n        line(x + 40, y + 40, x + 40, y);\n      case 3:\n        line(x + 40, y, x, y);\n    }\n  }\n}\n\n// class Wall{\n//     constructor(){\n//         this.present = true;\n//     }\n\n//   render = (i, x, y) => {\n//     stroke(255);\n//     switch (i) {\n//       case 0:\n//         line(x, y, x, y + 40);\n//       case 1:\n//         line(x, y + 40, x + 40, y + 40);\n//       case 2:\n//         line(x + 40, y + 40, x + 40, y);\n//       case 3:\n//         line(x + 40, y, x, y);\n//     }\n//   };\n// }\n\nmodule.exports = Wall;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93YWxsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2FsbC5qcz85MDU5Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFdhbGwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByZXNlbnQgPSB0cnVlO1xuICB9XG5cbiAgcmVuZGVyKHdhbGxQb3MsIHgsIHkpIHtcbiAgICBzdHJva2UoXCJibGFja1wiKTtcbiAgICBzdHJva2VXZWlnaHQoMyk7XG4gICAgc3dpdGNoICh3YWxsUG9zKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGxpbmUoeCwgeSwgeCwgeSArIDQwKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGluZSh4LCB5ICsgNDAsIHggKyA0MCwgeSArIDQwKTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbGluZSh4ICsgNDAsIHkgKyA0MCwgeCArIDQwLCB5KTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgbGluZSh4ICsgNDAsIHksIHgsIHkpO1xuICAgIH1cblxuICB9XG5cbiAgZGVyZW5kZXIod2FsbFBvcywgeCwgeSkge1xuICAgIHN0cm9rZShcIndoaXRlXCIpO1xuICAgIHN3aXRjaCAod2FsbFBvcykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBsaW5lKHgsIHksIHgsIHkgKyA0MCk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGxpbmUoeCwgeSArIDQwLCB4ICsgNDAsIHkgKyA0MCk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGxpbmUoeCArIDQwLCB5ICsgNDAsIHggKyA0MCwgeSk7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGxpbmUoeCArIDQwLCB5LCB4LCB5KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2xhc3MgV2FsbHtcbi8vICAgICBjb25zdHJ1Y3Rvcigpe1xuLy8gICAgICAgICB0aGlzLnByZXNlbnQgPSB0cnVlO1xuLy8gICAgIH1cblxuLy8gICByZW5kZXIgPSAoaSwgeCwgeSkgPT4ge1xuLy8gICAgIHN0cm9rZSgyNTUpO1xuLy8gICAgIHN3aXRjaCAoaSkge1xuLy8gICAgICAgY2FzZSAwOlxuLy8gICAgICAgICBsaW5lKHgsIHksIHgsIHkgKyA0MCk7XG4vLyAgICAgICBjYXNlIDE6XG4vLyAgICAgICAgIGxpbmUoeCwgeSArIDQwLCB4ICsgNDAsIHkgKyA0MCk7XG4vLyAgICAgICBjYXNlIDI6XG4vLyAgICAgICAgIGxpbmUoeCArIDQwLCB5ICsgNDAsIHggKyA0MCwgeSk7XG4vLyAgICAgICBjYXNlIDM6XG4vLyAgICAgICAgIGxpbmUoeCArIDQwLCB5LCB4LCB5KTtcbi8vICAgICB9XG4vLyAgIH07XG4vLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gV2FsbDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./wall.js\n");

/***/ })

/******/ });