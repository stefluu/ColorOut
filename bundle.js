/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cell.js":
/*!*****************!*\
  !*** ./cell.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Wall = __webpack_require__(/*! ./wall */ \"./wall.js\");\n\nfunction Cell(row, col, grid) {\n    this.row = row;\n    this.col = col;\n    this.grid = grid;\n    this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n    // this.walls = []\n    this.visited = false;\n\n    // [1, 2, 3, 4].forEach(() => this.walls.push(new Wall()));\n\n    this.highlight = function () {\n        // console.log(this.row, this.col);\n        const startRow = this.row * 40;\n        const startCol = this.col * 40;\n        noStroke();\n        fill(\"purple\");\n        rect(startRow, startCol, 40, 40)\n    }\n\n    this.render = function () {\n        const startRow = this.row * 40;\n        const startCol = this.col * 40;\n\n        // x, y, width, height\n        // rect(startX, startY, 40, 40)\n        // noFill();\n\n        for (let i = 0; i < this.walls.length; i++) {\n            if (this.walls[i].present) {\n                this.walls[i].render(i, startRow, startCol);\n            } else {\n                this.walls[i].derender(i, startRow, startCol);\n            }\n        }\n\n\n        if (this.visited) {\n            noStroke();\n            fill(\"white\");\n            rect(startRow + 1, startCol + 1, 38, 38)\n        }\n\n\n    }\n\n\n    this.getNeighbor = function () {\n\n        // const neighborsIndices = [\n        //     [row - 1, col],\n        //     [row + 1, col],\n        //     [row, col - 1],\n        //     [row, col + 1]            \n        // ]\n        // console.log(row)\n        // console.log(col)\n        // console.log(grid)\n\n        const top = grid[row - 1];\n        const right = grid[row + 1];\n        const bottom = grid[row];\n        const left = grid[row];\n\n        const neighbors = []\n\n        if (top) {\n            neighbors.push(grid[row - 1][col]);\n        }\n\n        if (right) {\n            neighbors.push(grid[row + 1][col]);\n        }\n\n        if (bottom) {\n            neighbors.push(grid[row][col - 1]);\n        }\n\n        if (left) {\n            neighbors.push(grid[row][col + 1]);\n        }\n\n\n        // const neighbors = [\n        //     grid[row - 1][col],\n        //     grid[row + 1][col],\n        //     grid[row][col - 1],\n        //     grid[row][col + 1]\n        // ]\n        //  const neighborsIndices = [\n        //     [row - 1, col],\n        //     [row + 1, col],\n        //     [row, col - 1],\n        //     [row, col + 1]            \n        // ]\n\n        // const neighbors = [];\n\n        // const validateIdx = function (idx) {\n        //     idx >= 0 && idx < 20\n        // }\n        // for(let i = 0; i < neighborsIndices.length; i++){\n        //     if(validateIdx(neighborsIndices[i][0]) && validateIdx(neighborsIndices[i][1])){\n        //         neighbors.push(grid[neighborsIndices[i][0]][neighborsIndices[i][1]])\n        //     }\n        // }\n\n\n        // let top = [(row - 1), col];\n        // validateIdx(top);\n        // let right = [row, (col+1)];\n        // validateIdx(right);\n        // let bottom = [(row + 1), col];\n        // validateIdx(bottom);\n        // let left = [row, (col - 1)];\n        // validateIdx(left);\n        // console.log(\"neighbors\")\n        // console.log(neighbors)\n\n        const validNeighbors = [];\n\n        // for(let i = 0; i < neighbors.length; i++){\n        //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n        //         validNeighbors.push(neighbors[i]);\n        //     }\n        // }\n\n        // const validNeighbors = neighbors.filter(neighbor => {\n        //     // let x = neighbor[0];\n        //     // let y = neighbor[1];\n\n        //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n        //         return neighbor;\n        //     }\n        // }\n\n        // const validateNeighbors = function(neighbor) {\n        //     if(!neighbor){\n        //         return false;\n        //     }\n        //     // let x = neighbor[0];\n        //     // let y = neighbor[1];\n\n        //     if(neighbor.row < 20 || neighbor.row >=0){\n        //         return false;\n        //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n        //         return false;\n        //     } else{\n        //         return true\n        //     }\n\n        // }\n\n        // const validateNeighbors = function(neighbor){\n        //     console.log(neighbor)\n        //     neighbor\n        // }\n\n        // const validNeighbors = neighbors.filter(validateNeighbors);\n\n        // for (let i = 0; i < neighbors.length; i++) {\n        //     if (neighbors[i] && !(neighbors[i].visited)) {\n        //         if(neighbors[i].row < 20 && neighbors[i].row >=0){\n        //             if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n        //                 validNeighbors.push(neighbors[i])\n        //             }\n        //         }\n        //     }\n        // }\n\n        for (let i = 0; i < neighbors.length; i++) {\n            if (neighbors[i] && !(neighbors[i].visited)) {\n                // if(neighbors[i].row < 20 && neighbors[i].row >=0){\n                //     if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n                validNeighbors.push(neighbors[i])\n                // }\n                // }\n            }\n        }\n\n\n        // console.log(\"valid\")\n        // console.log(validNeighbors)\n\n        let nextCell;\n\n        if (validNeighbors.length > 0) {\n            nextCell = this.chooseRandomNeighbor(validNeighbors);\n            return nextCell;\n        } else {\n            return undefined;\n        }\n        // let nextCell = \n\n        // //need to check if nextCell is true bc it could be undefined at the edges\n        // while(nextCell && nextCell.visited){\n        //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n        //     if(nextCell && !nextCell.visited){\n        //         return nextCell\n        //     }\n        // }\n\n        // if (nextCell) {\n        //     rect(startRow, startCol, 40, 40)\n        //     fill(\"purple\");\n        // }\n        // console.log(nextCell)\n        // return nextCell;\n\n    }\n\n    this.chooseRandomNeighbor = function (validNeighbors) {\n        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)]\n    }\n\n}\n\nmodule.exports = Cell;\n\n// const Wall = require('./wall');\n\n// function Cell(row, col, grid) {\n//     this.row = row;\n//     this.col = col;\n//     this.grid = grid;\n//     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n//     // this.walls = []\n//     this.visited = false;\n\n//     // [1, 2, 3, 4].forEach(() => this.walls.push(new Wall()));\n\n//     this.highlight = function(){\n//         // console.log(this.row, this.col);\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n//         noStroke();\n//         fill(\"purple\");\n//         rect(startRow, startCol, 40, 40)\n//     }\n\n//     this.render = function () {\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n\n//         // x, y, width, height\n//         // rect(startX, startY, 40, 40)\n//         // noFill();\n        \n//         for (let i = 0; i < this.walls.length; i++) {\n//             if(this.walls[i].present){\n//                 this.walls[i].render(i, startRow, startCol);\n//             } else {\n//                 this.walls[i].derender(i, startRow, startCol);\n//             }\n//         }\n        \n        \n//         if (this.visited) {\n//             noStroke();\n//             fill(\"white\");\n//             rect(startRow+1, startCol+1, 38, 38)\n//         }\n\n        \n//     }\n\n\n//     this.getNeighbor = function () {\n\n//         // const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n//         // console.log(row)\n//         // console.log(col)\n//         // console.log(grid)\n\n//         const top = grid[row - 1];\n//         const right = grid[row + 1];\n//         const bottom = grid[row];\n//         const left = grid[row];\n\n//         const neighbors = []\n\n//         if(top){\n//             neighbors.push(grid[row - 1][col]);\n//         }\n\n//         if(right){\n//             neighbors.push(grid[row + 1][col]);\n//         }\n\n//         if (bottom) {\n//             neighbors.push(grid[row][col - 1]);\n//         }\n\n//         if (left) {\n//             neighbors.push(grid[row][col + 1]);\n//         }\n\n\n//         // const neighbors = [\n//         //     grid[row - 1][col],\n//         //     grid[row + 1][col],\n//         //     grid[row][col - 1],\n//         //     grid[row][col + 1]\n//         // ]\n//         //  const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n\n//         // const neighbors = [];\n        \n//         // const validateIdx = function (idx) {\n//         //     idx >= 0 && idx < 20\n//         // }\n//         // for(let i = 0; i < neighborsIndices.length; i++){\n//         //     if(validateIdx(neighborsIndices[i][0]) && validateIdx(neighborsIndices[i][1])){\n//         //         neighbors.push(grid[neighborsIndices[i][0]][neighborsIndices[i][1]])\n//         //     }\n//         // }\n\n\n//         // let top = [(row - 1), col];\n//         // validateIdx(top);\n//         // let right = [row, (col+1)];\n//         // validateIdx(right);\n//         // let bottom = [(row + 1), col];\n//         // validateIdx(bottom);\n//         // let left = [row, (col - 1)];\n//         // validateIdx(left);\n//         // console.log(\"neighbors\")\n//         // console.log(neighbors)\n\n//         const validNeighbors = [];\n\n//         // for(let i = 0; i < neighbors.length; i++){\n//         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n//         //         validNeighbors.push(neighbors[i]);\n//         //     }\n//         // }\n\n//         // const validNeighbors = neighbors.filter(neighbor => {\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n//         //         return neighbor;\n//         //     }\n//         // }\n\n//         // const validateNeighbors = function(neighbor) {\n//         //     if(!neighbor){\n//         //         return false;\n//         //     }\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if(neighbor.row < 20 || neighbor.row >=0){\n//         //         return false;\n//         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n//         //         return false;\n//         //     } else{\n//         //         return true\n//         //     }\n\n//         // }\n\n//         // const validateNeighbors = function(neighbor){\n//         //     console.log(neighbor)\n//         //     neighbor\n//         // }\n\n//         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n//         // for (let i = 0; i < neighbors.length; i++) {\n//         //     if (neighbors[i] && !(neighbors[i].visited)) {\n//         //         if(neighbors[i].row < 20 && neighbors[i].row >=0){\n//         //             if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n//         //                 validNeighbors.push(neighbors[i])\n//         //             }\n//         //         }\n//         //     }\n//         // }\n\n//           for (let i = 0; i < neighbors.length; i++) {\n//             if (neighbors[i] && !(neighbors[i].visited)) {\n//                 // if(neighbors[i].row < 20 && neighbors[i].row >=0){\n//                 //     if(neighbors[i].col < 20 && neighbors[i].col >= 0){\n\n//                         validNeighbors.push(neighbors[i])\n//                     // }\n//                 // }\n//             }\n//         }\n\n\n//         // console.log(\"valid\")\n//         // console.log(validNeighbors)\n\n//         let nextCell;\n\n//         if (validNeighbors.length > 0) {\n//             nextCell = this.chooseRandomNeighbor(validNeighbors);\n//             return nextCell;\n//         } else{\n//             return undefined;\n//         }\n//         // let nextCell = \n\n//         // //need to check if nextCell is true bc it could be undefined at the edges\n//         // while(nextCell && nextCell.visited){\n//         //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n//         //     if(nextCell && !nextCell.visited){\n//         //         return nextCell\n//         //     }\n//         // }\n\n//         // if (nextCell) {\n//         //     rect(startRow, startCol, 40, 40)\n//         //     fill(\"purple\");\n//         // }\n//         // console.log(nextCell)\n//         // return nextCell;\n\n//     }\n\n//     this.chooseRandomNeighbor = function (validNeighbors) {\n//         return validNeighbors[Math.floor(Math.random() * validNeighbors.length)]\n//     }\n\n// }\n\n// module.exports = Cell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./cell.js\n");

/***/ }),

/***/ "./game.js":
/*!*****************!*\
  !*** ./game.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const User = __webpack_require__(/*! ./user */ \"./user.js\");\n\nfunction Game() {\n    this.user = new User();\n    this.end = [19, 19];\n    // this.userPos = [0, 0];\n\n    this.userRender = function () {\n        this.user.render(this.user.pos[0], this.user.pos[1]);\n    }\n\n    this.play = function () {\n        this.userMove();\n    }\n\n    this.end = function (userPos) {\n        this.user.pos === this.end\n    }\n\n    this.userMove = function () {\n\n        let userPos = this.user.pos;\n        let x = userPos[0];\n        let y = userPos[1];\n        // const keypress = event.keyCode;\n        // console.log(event);\n        if (keyIsDown(LEFT_ARROW)) {\n            // console.log(this.user.pos)\n            this.user.updatePos([\"y\", -40]);\n            this.user.render(this.user.pos[0], this.user.pos[1]);\n        }\n\n        if (keyIsDown(RIGHT_ARROW)) {\n            this.user.updatePos([\"y\", 40]);\n            this.user.render(this.user.pos[0], this.user.pos[1]);\n        }\n\n        if (keyIsDown(UP_ARROW)) {\n            this.user.updatePos([\"x\", -40]);\n            this.user.render(this.user.pos[0], this.user.pos[1]);\n        }\n\n        if (keyIsDown(DOWN_ARROW)) {\n            this.user.updatePos([\"x\", 40]);\n            this.user.render(this.user.pos[0], this.user.pos[1]);\n        }\n\n        // this.user.update();\n        // this.user.display();\n        // const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n        // let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n        // fill(currentColor);\n        // ellipse(19, 19, 15, 15);\n    }\n\n}\n\nmodule.exports = Game;\n//     this.xDimen = 900;\n//     this.yDimen = 900;\n//     this.cells = [];\n// }\n\n// Game.prototype.render = function(canvas){\n//     Game.setUp()\n// })\n\n// Game.prototype.setUp = function(mazeCanvas){\n//     const canvas = mazeCanvas.getContext(\"2d\");\n\n//     canvas.fillStyle = \"purple\";\n//     //x, y, width, height\n//     canvas.fillRect(0, 0, 800, 800);\n\n//     cols = 10; //each will be 8 x 8\n//     rows = 10;\n\n//     for(let rowNum = 0; rowNum < rows; rowNum++){\n//         for (let colNum = 0; colNum < cols, colNum++){\n//             cells.push(new Cell(rowNum, colNum))\n//         }\n//     }\n\n//     for(let i = 0; i < this.cells.length; i++){\n\n//     }\n\n\n// const User = require('./user');\n\n// function Game(){\n//     this.user = new User();\n//     this.end = [19, 19];\n//     // this.userPos = [0, 0];\n\n//     this.userRender = function(){\n//         this.user.render(this.user.pos[0], this.user.pos[1]);\n//     }\n\n//     // this.play = function(){\n//     //     this.userMove();\n//     // }\n\n//     this.end = function(userPos){\n//         this.user.pos === this.end\n//     }\n\n//     this.userMove = function(){\n//         if (keyIsDown(LEFT_ARROW)) {\n//             this.user.updatePos([\"y\", -40]);\n//             this.user.render();\n//         }\n    \n//         if (keyIsDown(RIGHT_ARROW)) {\n//             this.user.updatePos([\"y\", 40]);\n//             this.user.render();\n//         }\n    \n//         if (keyIsDown(UP_ARROW)) {\n//             this.user.updatePos([\"x\", -40]);\n//             this.user.render();\n//         }\n    \n//         if (keyIsDown(DOWN_ARROW)) {\n//             this.user.updatePos([\"x\", 40]);\n//             this.user.render();\n//         }\n        \n//         const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n//         let currentColor = colors[Math.floor(Math.random() * colors.length)];\n//         fill(currentColor);\n//         ellipse(19, 19, 15, 15);\n//     }\n\n// }\n\n// module.exports = Game;\n// //     this.xDimen = 900;\n// //     this.yDimen = 900;\n// //     this.cells = [];\n// // }\n\n// // Game.prototype.render = function(canvas){\n// //     Game.setUp()\n// // })\n\n// // Game.prototype.setUp = function(mazeCanvas){\n// //     const canvas = mazeCanvas.getContext(\"2d\");\n\n// //     canvas.fillStyle = \"purple\";\n// //     //x, y, width, height\n// //     canvas.fillRect(0, 0, 800, 800);\n\n// //     cols = 10; //each will be 8 x 8\n// //     rows = 10;\n\n// //     for(let rowNum = 0; rowNum < rows; rowNum++){\n// //         for (let colNum = 0; colNum < cols, colNum++){\n// //             cells.push(new Cell(rowNum, colNum))\n// //         }\n// //     }\n\n// //     for(let i = 0; i < this.cells.length; i++){\n        \n// //     }\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9nYW1lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vZ2FtZS5qcz8zNjU3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFVzZXIgPSByZXF1aXJlKCcuL3VzZXInKTtcblxuZnVuY3Rpb24gR2FtZSgpIHtcbiAgICB0aGlzLnVzZXIgPSBuZXcgVXNlcigpO1xuICAgIHRoaXMuZW5kID0gWzE5LCAxOV07XG4gICAgLy8gdGhpcy51c2VyUG9zID0gWzAsIDBdO1xuXG4gICAgdGhpcy51c2VyUmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVzZXIucmVuZGVyKHRoaXMudXNlci5wb3NbMF0sIHRoaXMudXNlci5wb3NbMV0pO1xuICAgIH1cblxuICAgIHRoaXMucGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51c2VyTW92ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuZW5kID0gZnVuY3Rpb24gKHVzZXJQb3MpIHtcbiAgICAgICAgdGhpcy51c2VyLnBvcyA9PT0gdGhpcy5lbmRcbiAgICB9XG5cbiAgICB0aGlzLnVzZXJNb3ZlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGxldCB1c2VyUG9zID0gdGhpcy51c2VyLnBvcztcbiAgICAgICAgbGV0IHggPSB1c2VyUG9zWzBdO1xuICAgICAgICBsZXQgeSA9IHVzZXJQb3NbMV07XG4gICAgICAgIC8vIGNvbnN0IGtleXByZXNzID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQpO1xuICAgICAgICBpZiAoa2V5SXNEb3duKExFRlRfQVJST1cpKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnVzZXIucG9zKVxuICAgICAgICAgICAgdGhpcy51c2VyLnVwZGF0ZVBvcyhbXCJ5XCIsIC00MF0pO1xuICAgICAgICAgICAgdGhpcy51c2VyLnJlbmRlcih0aGlzLnVzZXIucG9zWzBdLCB0aGlzLnVzZXIucG9zWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlJc0Rvd24oUklHSFRfQVJST1cpKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXIudXBkYXRlUG9zKFtcInlcIiwgNDBdKTtcbiAgICAgICAgICAgIHRoaXMudXNlci5yZW5kZXIodGhpcy51c2VyLnBvc1swXSwgdGhpcy51c2VyLnBvc1sxXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5SXNEb3duKFVQX0FSUk9XKSkge1xuICAgICAgICAgICAgdGhpcy51c2VyLnVwZGF0ZVBvcyhbXCJ4XCIsIC00MF0pO1xuICAgICAgICAgICAgdGhpcy51c2VyLnJlbmRlcih0aGlzLnVzZXIucG9zWzBdLCB0aGlzLnVzZXIucG9zWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlJc0Rvd24oRE9XTl9BUlJPVykpIHtcbiAgICAgICAgICAgIHRoaXMudXNlci51cGRhdGVQb3MoW1wieFwiLCA0MF0pO1xuICAgICAgICAgICAgdGhpcy51c2VyLnJlbmRlcih0aGlzLnVzZXIucG9zWzBdLCB0aGlzLnVzZXIucG9zWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMudXNlci51cGRhdGUoKTtcbiAgICAgICAgLy8gdGhpcy51c2VyLmRpc3BsYXkoKTtcbiAgICAgICAgLy8gY29uc3QgY29sb3JzID0gW1wibGlnaHRjb3JhbFwiLCBcIm9yYW5nZVwiLCBcIkNoYXJ0cmV1c2VcIiwgXCJkYXJrY3lhblwiLCBcImRhcmtvcmNoaWRcIl07XG4gICAgICAgIC8vIGxldCBjdXJyZW50Q29sb3IgPSBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldO1xuXG4gICAgICAgIC8vIGZpbGwoY3VycmVudENvbG9yKTtcbiAgICAgICAgLy8gZWxsaXBzZSgxOSwgMTksIDE1LCAxNSk7XG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZTtcbi8vICAgICB0aGlzLnhEaW1lbiA9IDkwMDtcbi8vICAgICB0aGlzLnlEaW1lbiA9IDkwMDtcbi8vICAgICB0aGlzLmNlbGxzID0gW107XG4vLyB9XG5cbi8vIEdhbWUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKGNhbnZhcyl7XG4vLyAgICAgR2FtZS5zZXRVcCgpXG4vLyB9KVxuXG4vLyBHYW1lLnByb3RvdHlwZS5zZXRVcCA9IGZ1bmN0aW9uKG1hemVDYW52YXMpe1xuLy8gICAgIGNvbnN0IGNhbnZhcyA9IG1hemVDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4vLyAgICAgY2FudmFzLmZpbGxTdHlsZSA9IFwicHVycGxlXCI7XG4vLyAgICAgLy94LCB5LCB3aWR0aCwgaGVpZ2h0XG4vLyAgICAgY2FudmFzLmZpbGxSZWN0KDAsIDAsIDgwMCwgODAwKTtcblxuLy8gICAgIGNvbHMgPSAxMDsgLy9lYWNoIHdpbGwgYmUgOCB4IDhcbi8vICAgICByb3dzID0gMTA7XG5cbi8vICAgICBmb3IobGV0IHJvd051bSA9IDA7IHJvd051bSA8IHJvd3M7IHJvd051bSsrKXtcbi8vICAgICAgICAgZm9yIChsZXQgY29sTnVtID0gMDsgY29sTnVtIDwgY29scywgY29sTnVtKyspe1xuLy8gICAgICAgICAgICAgY2VsbHMucHVzaChuZXcgQ2VsbChyb3dOdW0sIGNvbE51bSkpXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG5cbi8vICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jZWxscy5sZW5ndGg7IGkrKyl7XG5cbi8vICAgICB9XG5cblxuLy8gY29uc3QgVXNlciA9IHJlcXVpcmUoJy4vdXNlcicpO1xuXG4vLyBmdW5jdGlvbiBHYW1lKCl7XG4vLyAgICAgdGhpcy51c2VyID0gbmV3IFVzZXIoKTtcbi8vICAgICB0aGlzLmVuZCA9IFsxOSwgMTldO1xuLy8gICAgIC8vIHRoaXMudXNlclBvcyA9IFswLCAwXTtcblxuLy8gICAgIHRoaXMudXNlclJlbmRlciA9IGZ1bmN0aW9uKCl7XG4vLyAgICAgICAgIHRoaXMudXNlci5yZW5kZXIodGhpcy51c2VyLnBvc1swXSwgdGhpcy51c2VyLnBvc1sxXSk7XG4vLyAgICAgfVxuXG4vLyAgICAgLy8gdGhpcy5wbGF5ID0gZnVuY3Rpb24oKXtcbi8vICAgICAvLyAgICAgdGhpcy51c2VyTW92ZSgpO1xuLy8gICAgIC8vIH1cblxuLy8gICAgIHRoaXMuZW5kID0gZnVuY3Rpb24odXNlclBvcyl7XG4vLyAgICAgICAgIHRoaXMudXNlci5wb3MgPT09IHRoaXMuZW5kXG4vLyAgICAgfVxuXG4vLyAgICAgdGhpcy51c2VyTW92ZSA9IGZ1bmN0aW9uKCl7XG4vLyAgICAgICAgIGlmIChrZXlJc0Rvd24oTEVGVF9BUlJPVykpIHtcbi8vICAgICAgICAgICAgIHRoaXMudXNlci51cGRhdGVQb3MoW1wieVwiLCAtNDBdKTtcbi8vICAgICAgICAgICAgIHRoaXMudXNlci5yZW5kZXIoKTtcbi8vICAgICAgICAgfVxuICAgIFxuLy8gICAgICAgICBpZiAoa2V5SXNEb3duKFJJR0hUX0FSUk9XKSkge1xuLy8gICAgICAgICAgICAgdGhpcy51c2VyLnVwZGF0ZVBvcyhbXCJ5XCIsIDQwXSk7XG4vLyAgICAgICAgICAgICB0aGlzLnVzZXIucmVuZGVyKCk7XG4vLyAgICAgICAgIH1cbiAgICBcbi8vICAgICAgICAgaWYgKGtleUlzRG93bihVUF9BUlJPVykpIHtcbi8vICAgICAgICAgICAgIHRoaXMudXNlci51cGRhdGVQb3MoW1wieFwiLCAtNDBdKTtcbi8vICAgICAgICAgICAgIHRoaXMudXNlci5yZW5kZXIoKTtcbi8vICAgICAgICAgfVxuICAgIFxuLy8gICAgICAgICBpZiAoa2V5SXNEb3duKERPV05fQVJST1cpKSB7XG4vLyAgICAgICAgICAgICB0aGlzLnVzZXIudXBkYXRlUG9zKFtcInhcIiwgNDBdKTtcbi8vICAgICAgICAgICAgIHRoaXMudXNlci5yZW5kZXIoKTtcbi8vICAgICAgICAgfVxuICAgICAgICBcbi8vICAgICAgICAgY29uc3QgY29sb3JzID0gW1wibGlnaHRjb3JhbFwiLCBcIm9yYW5nZVwiLCBcIkNoYXJ0cmV1c2VcIiwgXCJkYXJrY3lhblwiLCBcImRhcmtvcmNoaWRcIl07XG4vLyAgICAgICAgIGxldCBjdXJyZW50Q29sb3IgPSBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldO1xuLy8gICAgICAgICBmaWxsKGN1cnJlbnRDb2xvcik7XG4vLyAgICAgICAgIGVsbGlwc2UoMTksIDE5LCAxNSwgMTUpO1xuLy8gICAgIH1cblxuLy8gfVxuXG4vLyBtb2R1bGUuZXhwb3J0cyA9IEdhbWU7XG4vLyAvLyAgICAgdGhpcy54RGltZW4gPSA5MDA7XG4vLyAvLyAgICAgdGhpcy55RGltZW4gPSA5MDA7XG4vLyAvLyAgICAgdGhpcy5jZWxscyA9IFtdO1xuLy8gLy8gfVxuXG4vLyAvLyBHYW1lLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihjYW52YXMpe1xuLy8gLy8gICAgIEdhbWUuc2V0VXAoKVxuLy8gLy8gfSlcblxuLy8gLy8gR2FtZS5wcm90b3R5cGUuc2V0VXAgPSBmdW5jdGlvbihtYXplQ2FudmFzKXtcbi8vIC8vICAgICBjb25zdCBjYW52YXMgPSBtYXplQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuLy8gLy8gICAgIGNhbnZhcy5maWxsU3R5bGUgPSBcInB1cnBsZVwiO1xuLy8gLy8gICAgIC8veCwgeSwgd2lkdGgsIGhlaWdodFxuLy8gLy8gICAgIGNhbnZhcy5maWxsUmVjdCgwLCAwLCA4MDAsIDgwMCk7XG5cbi8vIC8vICAgICBjb2xzID0gMTA7IC8vZWFjaCB3aWxsIGJlIDggeCA4XG4vLyAvLyAgICAgcm93cyA9IDEwO1xuXG4vLyAvLyAgICAgZm9yKGxldCByb3dOdW0gPSAwOyByb3dOdW0gPCByb3dzOyByb3dOdW0rKyl7XG4vLyAvLyAgICAgICAgIGZvciAobGV0IGNvbE51bSA9IDA7IGNvbE51bSA8IGNvbHMsIGNvbE51bSsrKXtcbi8vIC8vICAgICAgICAgICAgIGNlbGxzLnB1c2gobmV3IENlbGwocm93TnVtLCBjb2xOdW0pKVxuLy8gLy8gICAgICAgICB9XG4vLyAvLyAgICAgfVxuXG4vLyAvLyAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2VsbHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBcbi8vIC8vICAgICB9XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./game.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Cell = __webpack_require__(/*! ./cell */ \"./cell.js\");\n// const MovingObject = require('./moving_objects');\n// const User = require('./user');\nconst Game = __webpack_require__(/*! ./game */ \"./game.js\");\nconst Maze = __webpack_require__(/*! ./maze */ \"./maze.js\");\n\n// window.MovingObject = MovingObject;\n\nconst grid = [];\n\nlet current;\n\nconst stack = [];\n\nlet game = new Game();\nwindow.addEventListener(\"keypress\", (event) => (game.userMove(event)));\n\n\nlet maze;\n\nlet mapComplete = false;\n\n// const user = new User();\n\nfunction setup() {\n    createCanvas(800, 800);\n    //   cols = 10;\n    //   rows = 10;\n\n    for (let x = 0; x < 20; x++) {\n        grid[x] = [];\n        for (let y = 0; y < 20; y++) {\n            grid[x].push(new Cell(x, y, grid, stack))\n        }\n    }\n\n    let current_row = Math.floor(Math.random() * 20);\n    let current_col = Math.floor(Math.random() * 20);\n\n    current = grid[current_row][current_col];\n    maze = new Maze(current, grid, game)\n\n    //   console.log(\"current\")\n    //   console.log(current)\n\n    frameRate(100);\n\n}\n\n// const maze = new Maze(current, grid);\n\nfunction draw() {\n    // if(!mapComplete){\n    maze.draw();\n    // mapComplete = maze.mapComplete();\n    // }\n    console.log(\"finish maze\")\n    game.userMove();\n    game.userRender();\n    // game.userRender(0, 0);\n\n    // const keypress = event.keyCode;\n    // console.log(event);\n\n\n    // game.userMove();\n    // game.user.draw();\n\n    // loop();\n    // background(51)\n\n    // if(!map && !gameEnd){\n    //     if (current) {\n    //         current.visited = true;\n    //     // current.highlight();\n    //         stack.push(current);\n    //     }\n\n\n    //     // let nextCell = current.getNextCell(current.row, current.col);\n    //     let nextCell = current.getNeighbor();\n\n    //     // console.log(\"nextcell\")\n    //     // console.log(nextCell);\n\n    //     this.removeWalls = function(current, next, grid){\n    //         const changeX = current.row - next.row;\n    //         const changeY = current.col - next.col;\n\n\n    //         switch(changeX){\n    //             case 1:\n    //                 current.walls[0].present = false;  \n    //                 next.walls[2].present = false;\n    //                 break;\n    //             case -1:\n    //                 current.walls[2].present = false;\n    //                 next.walls[0].present = false;\n    //                 break;\n    //         }\n\n    //         switch (changeY) {\n    //             case 1:\n    //                 current.walls[3].present = false;\n    //                 next.walls[1].present = false;\n    //                 break;\n    //             case -1:\n    //                 current.walls[1].present = false;\n    //                 next.walls[3].present = false;\n    //                 break;\n    //         }\n\n    //         // const firstRow = grid[0];\n    //         // const lastRow = grid[19];\n\n    //         // for (let i = 0; i < firstRow.length; i++) {\n    //         //     firstRow[i].walls[3].present = true\n    //         // }\n\n    //         // for (let i = 0; i < lastRow.length; i++) {\n    //         //     lastRow[i].walls[1].present = true\n    //         // }\n\n    //         // const firstCol = grid.filter((cell) => {\n    //         //     return cell.col === 0\n    //         // })\n\n    //         // const lastCol = grid.filter((cell) => {\n    //         //     return cell.col === 19\n    //         // })\n\n    //         // for (let i = 0; i < firstCol.length; i++) {\n    //         //     firstCol[i].walls[2].present = true;\n    //         // }\n\n    //         // for (let i = 0; i < lastCol.length; i++) {\n    //         //     lastCol[i].walls[0].present = true;\n    //         // }\n    //     } \n\n    //     if(nextCell){\n    //         nextCell.visited = true;\n    //         this.removeWalls(current, nextCell, grid);\n    //         current = nextCell;\n    //         // console.log(\"stack\")\n    //         // console.log(stack);\n    //     } else if(stack.length > 0){\n    //         potentialRestart = stack.pop()\n    //             while (potentialRestart && !potentialRestart.getNeighbor()){\n    //                 if(!stack.length){\n    //                     potentialRestart.visited = true\n    //                     map = true;\n    //                     noLoop();\n    //                     break;\n    //                 } else {\n    //                     potentialRestart = stack.pop();\n    //                 }\n    //             }\n    //             current = potentialRestart;\n    //             // console.log(current)\n    //     // } else if(allVisited) {\n    //     //     noLoop();\n    //     }\n\n\n    //     for (let i = 0; i < grid.length; i++) {\n    //         for (let j = 0; j < grid[i].length; j++) {\n    //             grid[i][j].render();\n    //         }\n    //     }\n\n    //     game.userRender();\n    // } else if(map && !gameEnd){\n    //     // loop()\n    //     console.log(\"hi\")\n    //     game.userRender();\n    //     // game.userMove();\n    //     keyPressed();\n\n    //     for (let i = 0; i < grid.length; i++) {\n    //         for (let j = 0; j < grid[i].length; j++) {\n    //             grid[i][j].render();\n    //         }\n    //     }\n\n    // }\n\n    // // current.highlight();\n\n    // function keyPressed(){\n    //     // loop();\n    //     game.userMove();\n    //     // loop()        \n    //     return false;\n    // }\n\n    // keyPressed();\n\n    // // user.render();\n\n\n\n    // // redraw();\n\n    // // while (!game.end()){\n    // //     game.userMove()\n    // // }\n\n}\n\n\n// function Cell(row, col) {\n//     this.row = row;\n//     this.col = col;\n//     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n//     this.visited = false;\n\n//     this.render = function () {\n//         const startRow = this.row * 40;\n//         const startCol = this.col * 40;\n\n//         // x, y, width, height\n//         // rect(startX, startY, 40, 40)\n//         // noFill();\n//         for(let i = 0; i < this.walls.length; i++){\n//             this.walls[i].render(i, startRow, startCol);\n//         }\n\n//         if(this.visited){\n//             rect(startRow, startCol, 40, 40)\n//             fill(\"green\");\n//         }\n\n//     }\n\n//     this.getNeighbor = function(){\n\n//         // const neighborsIndices = [\n//         //     [row - 1, col],\n//         //     [row + 1, col],\n//         //     [row, col - 1],\n//         //     [row, col + 1]            \n//         // ]\n\n//         const neighbors = [\n//             grid[row - 1][col],\n//             grid[row + 1][col],\n//             grid[row][col - 1],\n//             grid[row][col + 1]            \n//         ]\n\n//         // const neighbors = [];\n\n//         // const validateIdx = function (idxArr) {\n//         //     if(idxArr.every((idx) => {\n//         //         return idx < 20 && idx >= 0}\n//         //         )){\n\n//         //         neighbors.push(idxArr);\n//         //     }\n//         // }\n\n//         // let top = [(row - 1), col];\n//         // validateIdx(top);\n//         // let right = [row, (col+1)];\n//         // validateIdx(right);\n//         // let bottom = [(row + 1), col];\n//         // validateIdx(bottom);\n//         // let left = [row, (col - 1)];\n//         // validateIdx(left);\n\n//         console.log(neighbors)\n\n//         const validNeighbors = [];\n\n//         // for(let i = 0; i < neighbors.length; i++){\n//         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n//         //         validNeighbors.push(neighbors[i]);\n//         //     }\n//         // }\n\n//         // const validNeighbors = neighbors.filter(neighbor => {\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n//         //         return neighbor;\n//         //     }\n//         // }\n\n//         // const validateNeighbors = function(neighbor) {\n//         //     if(!neighbor){\n//         //         return false;\n//         //     }\n//         //     // let x = neighbor[0];\n//         //     // let y = neighbor[1];\n\n//         //     if(neighbor.row < 20 || neighbor.row >=0){\n//         //         return false;\n//         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n//         //         return false;\n//         //     } else{\n//         //         return true\n//         //     }\n\n//         // }\n\n//         // const validateNeighbors = function(neighbor){\n//         //     console.log(neighbor)\n//         //     neighbor\n//         // }\n\n//         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n//         for(let i = 0; i < neighbors.length; i++){\n//             if(neighbors[i] && !(neighbors[i].visited)){\n//                 validNeighbors.push(neighbors[i])\n//             }\n//         }\n\n\n//         console.log(\"valid\") \n//         console.log(validNeighbors)\n\n//         let nextCell;\n\n//         if(validNeighbors.length > 0){\n//             nextCell = this.chooseRandomNeighbor(validNeighbors);\n//             return nextCell;\n//         }\n//         // let nextCell = \n\n//         // //need to check if nextCell is true bc it could be undefined at the edges\n//         // while(nextCell && nextCell.visited){\n//             //     nextCell = this.chooseRandomNeighbor(neighbors)\n\n//             //     if(nextCell && !nextCell.visited){\n//                 //         return nextCell\n//                 //     }\n//                 // }\n\n//                 // if (nextCell) {\n//                     //     rect(startRow, startCol, 40, 40)\n//                     //     fill(\"purple\");\n//                     // }\n//                     // console.log(nextCell)\n//                     // return nextCell;\n\n//     }\n\n//     this.chooseRandomNeighbor = function(validNeighbors) {\n//        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)] \n//     }\n\n// }\n\n// function Wall(){\n//     this.present = true;\n\n//     this.render = function(i, x, y){\n//         stroke(255);\n//         switch(i){\n//             case 0: \n//                 line(x, y, x, y + 40)\n//             case 1:\n//                 line(x, y + 40, x + 40, y + 40)\n//             case 2: \n//                 line(x + 40, y + 40, x + 40, y)\n//             case 3:\n//                 line(x + 40, y, x, y)\n//         }\n//     }\n// }\n\nwindow.setup = setup;\n\nwindow.draw = draw;\n\n//p5 cannot find the functions, \n//so we need to set it to the window so the fx can be found \n\n// const Cell = require('./cell');\n// // const MovingObject = require('./moving_objects');\n// // const User = require('./user');\n// const Game = require('./game');\n\n// // window.MovingObject = MovingObject;\n\n// const grid = [];\n\n// let current;\n\n// const stack = [];\n\n// let game = new Game();\n\n// let map = false;\n\n// let gameEnd = false;\n\n// // const user = new User();\n\n// function setup() {\n//   createCanvas(800, 800);\n// //   cols = 10;\n// //   rows = 10;\n\n//   for(let x = 0; x < 20; x++){\n//       grid[x] = [];\n//       for(let y = 0; y < 20; y++){\n//         grid[x].push(new Cell(x, y, grid, stack))\n//       }\n//   }\n\n//   let current_row = Math.floor(Math.random() * 20);\n//   let current_col = Math.floor(Math.random() * 20);\n\n//   current = grid[current_row][current_col];\n\n//   //   console.log(\"current\")\n// //   console.log(current)\n  \n//   frameRate(100);\n  \n// }\n\n// function draw() {\n//     background(51)\n\n//     if(!map && !gameEnd){\n//         if (current) {\n//             current.visited = true;\n//         // current.highlight();\n//             stack.push(current);\n//         }\n    \n    \n//         // let nextCell = current.getNextCell(current.row, current.col);\n//         let nextCell = current.getNeighbor();\n    \n//         // console.log(\"nextcell\")\n//         // console.log(nextCell);\n        \n//         this.removeWalls = function(current, next, grid){\n//             const changeX = current.row - next.row;\n//             const changeY = current.col - next.col;\n            \n//             // current.walls.forEach(wall => wall.present = false)\n            \n    \n//             switch(changeX){\n//                 case 1:\n//                     current.walls[0].present = false;  \n//                     next.walls[2].present = false;\n//                     break;\n//                 case -1:\n//                     current.walls[2].present = false;\n//                     next.walls[0].present = false;\n//                     break;\n//             }\n    \n//             switch (changeY) {\n//                 case 1:\n//                     current.walls[3].present = false;\n//                     next.walls[1].present = false;\n//                     break;\n//                 case -1:\n//                     current.walls[1].present = false;\n//                     next.walls[3].present = false;\n//                     break;\n//             }\n    \n//             // const firstRow = grid[0];\n//             // const lastRow = grid[19];\n    \n//             // for (let i = 0; i < firstRow.length; i++) {\n//             //     firstRow[i].walls[3].present = true\n//             // }\n    \n//             // for (let i = 0; i < lastRow.length; i++) {\n//             //     lastRow[i].walls[1].present = true\n//             // }\n    \n//             // const firstCol = grid.filter((cell) => {\n//             //     return cell.col === 0\n//             // })\n    \n//             // const lastCol = grid.filter((cell) => {\n//             //     return cell.col === 19\n//             // })\n    \n//             // for (let i = 0; i < firstCol.length; i++) {\n//             //     firstCol[i].walls[2].present = true;\n//             // }\n    \n//             // for (let i = 0; i < lastCol.length; i++) {\n//             //     lastCol[i].walls[0].present = true;\n//             // }\n//         } \n    \n//         if(nextCell){\n//             nextCell.visited = true;\n//             this.removeWalls(current, nextCell, grid);\n//             current = nextCell;\n//             // console.log(\"stack\")\n//             // console.log(stack);\n//         } else if(stack.length > 0){\n//             potentialRestart = stack.pop()\n//                 while (potentialRestart && !potentialRestart.getNeighbor()){\n//                     if(!stack.length){\n//                         potentialRestart.visited = true\n//                         map = true;\n//                         noLoop();\n//                         break;\n//                     } else {\n//                         potentialRestart = stack.pop();\n//                     }\n//                 }\n//                 current = potentialRestart;\n//                 // console.log(current)\n//         // } else if(allVisited) {\n//         //     noLoop();\n//         }\n    \n    \n//         for (let i = 0; i < grid.length; i++) {\n//             for (let j = 0; j < grid[i].length; j++) {\n//                 grid[i][j].render();\n//             }\n//         }\n\n//         game.userRender();\n//     } else if(map && !gameEnd){\n//         // loop()\n//         console.log(\"hi\")\n//         game.userRender();\n//         // game.userMove();\n//         keyPressed();\n        \n//     }\n    \n//     // current.highlight();\n    \n//     function keyPressed(){\n//         // loop();\n//         game.userMove();\n//         // loop()        \n//         return false;\n//     }\n\n//     keyPressed();\n\n//     // user.render();\n\n    \n\n//     // redraw();\n    \n//     // while (!game.end()){\n//     //     game.userMove()\n//     // }\n\n// }\n\n// // function Cell(row, col) {\n// //     this.row = row;\n// //     this.col = col;\n// //     this.walls = [new Wall(), new Wall(), new Wall(), new Wall()];\n// //     this.visited = false;\n\n// //     this.render = function () {\n// //         const startRow = this.row * 40;\n// //         const startCol = this.col * 40;\n\n// //         // x, y, width, height\n// //         // rect(startX, startY, 40, 40)\n// //         // noFill();\n// //         for(let i = 0; i < this.walls.length; i++){\n// //             this.walls[i].render(i, startRow, startCol);\n// //         }\n\n// //         if(this.visited){\n// //             rect(startRow, startCol, 40, 40)\n// //             fill(\"green\");\n// //         }\n        \n// //     }\n\n// //     this.getNeighbor = function(){\n        \n// //         // const neighborsIndices = [\n// //         //     [row - 1, col],\n// //         //     [row + 1, col],\n// //         //     [row, col - 1],\n// //         //     [row, col + 1]            \n// //         // ]\n\n// //         const neighbors = [\n// //             grid[row - 1][col],\n// //             grid[row + 1][col],\n// //             grid[row][col - 1],\n// //             grid[row][col + 1]            \n// //         ]\n\n// //         // const neighbors = [];\n\n// //         // const validateIdx = function (idxArr) {\n// //         //     if(idxArr.every((idx) => {\n// //         //         return idx < 20 && idx >= 0}\n// //         //         )){\n                \n// //         //         neighbors.push(idxArr);\n// //         //     }\n// //         // }\n\n// //         // let top = [(row - 1), col];\n// //         // validateIdx(top);\n// //         // let right = [row, (col+1)];\n// //         // validateIdx(right);\n// //         // let bottom = [(row + 1), col];\n// //         // validateIdx(bottom);\n// //         // let left = [row, (col - 1)];\n// //         // validateIdx(left);\n\n// //         console.log(neighbors)\n\n// //         const validNeighbors = [];\n\n// //         // for(let i = 0; i < neighbors.length; i++){\n// //         //     if ((neighbors[i][0] < 20 && neighbors[i][0] >= 0) && (neighbors[i][1] < 20 && neighbors[i][1] >= 0)) {\n// //         //         validNeighbors.push(neighbors[i]);\n// //         //     }\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(neighbor => {\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if((neighbor[0] < 20 && neighbor[0] >= 0) && (neighbor[1] < 20 && neighbor[1] >= 0)){\n// //         //         return neighbor;\n// //         //     }\n// //         // }\n\n// //         // const validateNeighbors = function(neighbor) {\n// //         //     if(!neighbor){\n// //         //         return false;\n// //         //     }\n// //         //     // let x = neighbor[0];\n// //         //     // let y = neighbor[1];\n\n// //         //     if(neighbor.row < 20 || neighbor.row >=0){\n// //         //         return false;\n// //         //     } else if(neighbor.col < 20 || neighbor.col >= 0){\n// //         //         return false;\n// //         //     } else{\n// //         //         return true\n// //         //     }\n            \n// //         // }\n\n// //         // const validateNeighbors = function(neighbor){\n// //         //     console.log(neighbor)\n// //         //     neighbor\n// //         // }\n\n// //         // const validNeighbors = neighbors.filter(validateNeighbors);\n\n// //         for(let i = 0; i < neighbors.length; i++){\n// //             if(neighbors[i] && !(neighbors[i].visited)){\n// //                 validNeighbors.push(neighbors[i])\n// //             }\n// //         }\n        \n        \n// //         console.log(\"valid\") \n// //         console.log(validNeighbors)\n        \n// //         let nextCell;\n\n// //         if(validNeighbors.length > 0){\n// //             nextCell = this.chooseRandomNeighbor(validNeighbors);\n// //             return nextCell;\n// //         }\n// //         // let nextCell = \n        \n// //         // //need to check if nextCell is true bc it could be undefined at the edges\n// //         // while(nextCell && nextCell.visited){\n// //             //     nextCell = this.chooseRandomNeighbor(neighbors)\n            \n// //             //     if(nextCell && !nextCell.visited){\n// //                 //         return nextCell\n// //                 //     }\n// //                 // }\n                \n// //                 // if (nextCell) {\n// //                     //     rect(startRow, startCol, 40, 40)\n// //                     //     fill(\"purple\");\n// //                     // }\n// //                     // console.log(nextCell)\n// //                     // return nextCell;\n           \n// //     }\n    \n// //     this.chooseRandomNeighbor = function(validNeighbors) {\n// //        return validNeighbors[Math.floor(Math.random() * validNeighbors.length)] \n// //     }\n\n// // }\n\n// // function Wall(){\n// //     this.present = true;\n\n// //     this.render = function(i, x, y){\n// //         stroke(255);\n// //         switch(i){\n// //             case 0: \n// //                 line(x, y, x, y + 40)\n// //             case 1:\n// //                 line(x, y + 40, x + 40, y + 40)\n// //             case 2: \n// //                 line(x + 40, y + 40, x + 40, y)\n// //             case 3:\n// //                 line(x + 40, y, x, y)\n// //         }\n// //     }\n// // }\n\n// window.setup = setup;\n\n// window.draw = draw;\n\n// //p5 cannot find the functions, \n// //so we need to set it to the window so the fx can be found //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2VsbCA9IHJlcXVpcmUoJy4vY2VsbCcpO1xuLy8gY29uc3QgTW92aW5nT2JqZWN0ID0gcmVxdWlyZSgnLi9tb3Zpbmdfb2JqZWN0cycpO1xuLy8gY29uc3QgVXNlciA9IHJlcXVpcmUoJy4vdXNlcicpO1xuY29uc3QgR2FtZSA9IHJlcXVpcmUoJy4vZ2FtZScpO1xuY29uc3QgTWF6ZSA9IHJlcXVpcmUoJy4vbWF6ZScpO1xuXG4vLyB3aW5kb3cuTW92aW5nT2JqZWN0ID0gTW92aW5nT2JqZWN0O1xuXG5jb25zdCBncmlkID0gW107XG5cbmxldCBjdXJyZW50O1xuXG5jb25zdCBzdGFjayA9IFtdO1xuXG5sZXQgZ2FtZSA9IG5ldyBHYW1lKCk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIChldmVudCkgPT4gKGdhbWUudXNlck1vdmUoZXZlbnQpKSk7XG5cblxubGV0IG1hemU7XG5cbmxldCBtYXBDb21wbGV0ZSA9IGZhbHNlO1xuXG4vLyBjb25zdCB1c2VyID0gbmV3IFVzZXIoKTtcblxuZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgY3JlYXRlQ2FudmFzKDgwMCwgODAwKTtcbiAgICAvLyAgIGNvbHMgPSAxMDtcbiAgICAvLyAgIHJvd3MgPSAxMDtcblxuICAgIGZvciAobGV0IHggPSAwOyB4IDwgMjA7IHgrKykge1xuICAgICAgICBncmlkW3hdID0gW107XG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgMjA7IHkrKykge1xuICAgICAgICAgICAgZ3JpZFt4XS5wdXNoKG5ldyBDZWxsKHgsIHksIGdyaWQsIHN0YWNrKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBjdXJyZW50X3JvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKTtcbiAgICBsZXQgY3VycmVudF9jb2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyMCk7XG5cbiAgICBjdXJyZW50ID0gZ3JpZFtjdXJyZW50X3Jvd11bY3VycmVudF9jb2xdO1xuICAgIG1hemUgPSBuZXcgTWF6ZShjdXJyZW50LCBncmlkLCBnYW1lKVxuXG4gICAgLy8gICBjb25zb2xlLmxvZyhcImN1cnJlbnRcIilcbiAgICAvLyAgIGNvbnNvbGUubG9nKGN1cnJlbnQpXG5cbiAgICBmcmFtZVJhdGUoMTAwKTtcblxufVxuXG4vLyBjb25zdCBtYXplID0gbmV3IE1hemUoY3VycmVudCwgZ3JpZCk7XG5cbmZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgLy8gaWYoIW1hcENvbXBsZXRlKXtcbiAgICBtYXplLmRyYXcoKTtcbiAgICAvLyBtYXBDb21wbGV0ZSA9IG1hemUubWFwQ29tcGxldGUoKTtcbiAgICAvLyB9XG4gICAgY29uc29sZS5sb2coXCJmaW5pc2ggbWF6ZVwiKVxuICAgIGdhbWUudXNlck1vdmUoKTtcbiAgICBnYW1lLnVzZXJSZW5kZXIoKTtcbiAgICAvLyBnYW1lLnVzZXJSZW5kZXIoMCwgMCk7XG5cbiAgICAvLyBjb25zdCBrZXlwcmVzcyA9IGV2ZW50LmtleUNvZGU7XG4gICAgLy8gY29uc29sZS5sb2coZXZlbnQpO1xuXG5cbiAgICAvLyBnYW1lLnVzZXJNb3ZlKCk7XG4gICAgLy8gZ2FtZS51c2VyLmRyYXcoKTtcblxuICAgIC8vIGxvb3AoKTtcbiAgICAvLyBiYWNrZ3JvdW5kKDUxKVxuXG4gICAgLy8gaWYoIW1hcCAmJiAhZ2FtZUVuZCl7XG4gICAgLy8gICAgIGlmIChjdXJyZW50KSB7XG4gICAgLy8gICAgICAgICBjdXJyZW50LnZpc2l0ZWQgPSB0cnVlO1xuICAgIC8vICAgICAvLyBjdXJyZW50LmhpZ2hsaWdodCgpO1xuICAgIC8vICAgICAgICAgc3RhY2sucHVzaChjdXJyZW50KTtcbiAgICAvLyAgICAgfVxuXG5cbiAgICAvLyAgICAgLy8gbGV0IG5leHRDZWxsID0gY3VycmVudC5nZXROZXh0Q2VsbChjdXJyZW50LnJvdywgY3VycmVudC5jb2wpO1xuICAgIC8vICAgICBsZXQgbmV4dENlbGwgPSBjdXJyZW50LmdldE5laWdoYm9yKCk7XG5cbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coXCJuZXh0Y2VsbFwiKVxuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhuZXh0Q2VsbCk7XG5cbiAgICAvLyAgICAgdGhpcy5yZW1vdmVXYWxscyA9IGZ1bmN0aW9uKGN1cnJlbnQsIG5leHQsIGdyaWQpe1xuICAgIC8vICAgICAgICAgY29uc3QgY2hhbmdlWCA9IGN1cnJlbnQucm93IC0gbmV4dC5yb3c7XG4gICAgLy8gICAgICAgICBjb25zdCBjaGFuZ2VZID0gY3VycmVudC5jb2wgLSBuZXh0LmNvbDtcblxuXG4gICAgLy8gICAgICAgICBzd2l0Y2goY2hhbmdlWCl7XG4gICAgLy8gICAgICAgICAgICAgY2FzZSAxOlxuICAgIC8vICAgICAgICAgICAgICAgICBjdXJyZW50LndhbGxzWzBdLnByZXNlbnQgPSBmYWxzZTsgIFxuICAgIC8vICAgICAgICAgICAgICAgICBuZXh0LndhbGxzWzJdLnByZXNlbnQgPSBmYWxzZTtcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgLy8gICAgICAgICAgICAgY2FzZSAtMTpcbiAgICAvLyAgICAgICAgICAgICAgICAgY3VycmVudC53YWxsc1syXS5wcmVzZW50ID0gZmFsc2U7XG4gICAgLy8gICAgICAgICAgICAgICAgIG5leHQud2FsbHNbMF0ucHJlc2VudCA9IGZhbHNlO1xuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAvLyAgICAgICAgIH1cblxuICAgIC8vICAgICAgICAgc3dpdGNoIChjaGFuZ2VZKSB7XG4gICAgLy8gICAgICAgICAgICAgY2FzZSAxOlxuICAgIC8vICAgICAgICAgICAgICAgICBjdXJyZW50LndhbGxzWzNdLnByZXNlbnQgPSBmYWxzZTtcbiAgICAvLyAgICAgICAgICAgICAgICAgbmV4dC53YWxsc1sxXS5wcmVzZW50ID0gZmFsc2U7XG4gICAgLy8gICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIC8vICAgICAgICAgICAgIGNhc2UgLTE6XG4gICAgLy8gICAgICAgICAgICAgICAgIGN1cnJlbnQud2FsbHNbMV0ucHJlc2VudCA9IGZhbHNlO1xuICAgIC8vICAgICAgICAgICAgICAgICBuZXh0LndhbGxzWzNdLnByZXNlbnQgPSBmYWxzZTtcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgLy8gICAgICAgICB9XG5cbiAgICAvLyAgICAgICAgIC8vIGNvbnN0IGZpcnN0Um93ID0gZ3JpZFswXTtcbiAgICAvLyAgICAgICAgIC8vIGNvbnN0IGxhc3RSb3cgPSBncmlkWzE5XTtcblxuICAgIC8vICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdFJvdy5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgICAgICAgLy8gICAgIGZpcnN0Um93W2ldLndhbGxzWzNdLnByZXNlbnQgPSB0cnVlXG4gICAgLy8gICAgICAgICAvLyB9XG5cbiAgICAvLyAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdFJvdy5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgICAgICAgLy8gICAgIGxhc3RSb3dbaV0ud2FsbHNbMV0ucHJlc2VudCA9IHRydWVcbiAgICAvLyAgICAgICAgIC8vIH1cblxuICAgIC8vICAgICAgICAgLy8gY29uc3QgZmlyc3RDb2wgPSBncmlkLmZpbHRlcigoY2VsbCkgPT4ge1xuICAgIC8vICAgICAgICAgLy8gICAgIHJldHVybiBjZWxsLmNvbCA9PT0gMFxuICAgIC8vICAgICAgICAgLy8gfSlcblxuICAgIC8vICAgICAgICAgLy8gY29uc3QgbGFzdENvbCA9IGdyaWQuZmlsdGVyKChjZWxsKSA9PiB7XG4gICAgLy8gICAgICAgICAvLyAgICAgcmV0dXJuIGNlbGwuY29sID09PSAxOVxuICAgIC8vICAgICAgICAgLy8gfSlcblxuICAgIC8vICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdENvbC5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgICAgICAgLy8gICAgIGZpcnN0Q29sW2ldLndhbGxzWzJdLnByZXNlbnQgPSB0cnVlO1xuICAgIC8vICAgICAgICAgLy8gfVxuXG4gICAgLy8gICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RDb2wubGVuZ3RoOyBpKyspIHtcbiAgICAvLyAgICAgICAgIC8vICAgICBsYXN0Q29sW2ldLndhbGxzWzBdLnByZXNlbnQgPSB0cnVlO1xuICAgIC8vICAgICAgICAgLy8gfVxuICAgIC8vICAgICB9IFxuXG4gICAgLy8gICAgIGlmKG5leHRDZWxsKXtcbiAgICAvLyAgICAgICAgIG5leHRDZWxsLnZpc2l0ZWQgPSB0cnVlO1xuICAgIC8vICAgICAgICAgdGhpcy5yZW1vdmVXYWxscyhjdXJyZW50LCBuZXh0Q2VsbCwgZ3JpZCk7XG4gICAgLy8gICAgICAgICBjdXJyZW50ID0gbmV4dENlbGw7XG4gICAgLy8gICAgICAgICAvLyBjb25zb2xlLmxvZyhcInN0YWNrXCIpXG4gICAgLy8gICAgICAgICAvLyBjb25zb2xlLmxvZyhzdGFjayk7XG4gICAgLy8gICAgIH0gZWxzZSBpZihzdGFjay5sZW5ndGggPiAwKXtcbiAgICAvLyAgICAgICAgIHBvdGVudGlhbFJlc3RhcnQgPSBzdGFjay5wb3AoKVxuICAgIC8vICAgICAgICAgICAgIHdoaWxlIChwb3RlbnRpYWxSZXN0YXJ0ICYmICFwb3RlbnRpYWxSZXN0YXJ0LmdldE5laWdoYm9yKCkpe1xuICAgIC8vICAgICAgICAgICAgICAgICBpZighc3RhY2subGVuZ3RoKXtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHBvdGVudGlhbFJlc3RhcnQudmlzaXRlZCA9IHRydWVcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcCA9IHRydWU7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBub0xvb3AoKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIC8vICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgcG90ZW50aWFsUmVzdGFydCA9IHN0YWNrLnBvcCgpO1xuICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgICAgIGN1cnJlbnQgPSBwb3RlbnRpYWxSZXN0YXJ0O1xuICAgIC8vICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGN1cnJlbnQpXG4gICAgLy8gICAgIC8vIH0gZWxzZSBpZihhbGxWaXNpdGVkKSB7XG4gICAgLy8gICAgIC8vICAgICBub0xvb3AoKTtcbiAgICAvLyAgICAgfVxuXG5cbiAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncmlkLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyaWRbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAvLyAgICAgICAgICAgICBncmlkW2ldW2pdLnJlbmRlcigpO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG5cbiAgICAvLyAgICAgZ2FtZS51c2VyUmVuZGVyKCk7XG4gICAgLy8gfSBlbHNlIGlmKG1hcCAmJiAhZ2FtZUVuZCl7XG4gICAgLy8gICAgIC8vIGxvb3AoKVxuICAgIC8vICAgICBjb25zb2xlLmxvZyhcImhpXCIpXG4gICAgLy8gICAgIGdhbWUudXNlclJlbmRlcigpO1xuICAgIC8vICAgICAvLyBnYW1lLnVzZXJNb3ZlKCk7XG4gICAgLy8gICAgIGtleVByZXNzZWQoKTtcblxuICAgIC8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyaWQubGVuZ3RoOyBpKyspIHtcbiAgICAvLyAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JpZFtpXS5sZW5ndGg7IGorKykge1xuICAgIC8vICAgICAgICAgICAgIGdyaWRbaV1bal0ucmVuZGVyKCk7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cblxuICAgIC8vIH1cblxuICAgIC8vIC8vIGN1cnJlbnQuaGlnaGxpZ2h0KCk7XG5cbiAgICAvLyBmdW5jdGlvbiBrZXlQcmVzc2VkKCl7XG4gICAgLy8gICAgIC8vIGxvb3AoKTtcbiAgICAvLyAgICAgZ2FtZS51c2VyTW92ZSgpO1xuICAgIC8vICAgICAvLyBsb29wKCkgICAgICAgIFxuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gfVxuXG4gICAgLy8ga2V5UHJlc3NlZCgpO1xuXG4gICAgLy8gLy8gdXNlci5yZW5kZXIoKTtcblxuXG5cbiAgICAvLyAvLyByZWRyYXcoKTtcblxuICAgIC8vIC8vIHdoaWxlICghZ2FtZS5lbmQoKSl7XG4gICAgLy8gLy8gICAgIGdhbWUudXNlck1vdmUoKVxuICAgIC8vIC8vIH1cblxufVxuXG5cbi8vIGZ1bmN0aW9uIENlbGwocm93LCBjb2wpIHtcbi8vICAgICB0aGlzLnJvdyA9IHJvdztcbi8vICAgICB0aGlzLmNvbCA9IGNvbDtcbi8vICAgICB0aGlzLndhbGxzID0gW25ldyBXYWxsKCksIG5ldyBXYWxsKCksIG5ldyBXYWxsKCksIG5ldyBXYWxsKCldO1xuLy8gICAgIHRoaXMudmlzaXRlZCA9IGZhbHNlO1xuXG4vLyAgICAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgIGNvbnN0IHN0YXJ0Um93ID0gdGhpcy5yb3cgKiA0MDtcbi8vICAgICAgICAgY29uc3Qgc3RhcnRDb2wgPSB0aGlzLmNvbCAqIDQwO1xuXG4vLyAgICAgICAgIC8vIHgsIHksIHdpZHRoLCBoZWlnaHRcbi8vICAgICAgICAgLy8gcmVjdChzdGFydFgsIHN0YXJ0WSwgNDAsIDQwKVxuLy8gICAgICAgICAvLyBub0ZpbGwoKTtcbi8vICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMud2FsbHMubGVuZ3RoOyBpKyspe1xuLy8gICAgICAgICAgICAgdGhpcy53YWxsc1tpXS5yZW5kZXIoaSwgc3RhcnRSb3csIHN0YXJ0Q29sKTtcbi8vICAgICAgICAgfVxuXG4vLyAgICAgICAgIGlmKHRoaXMudmlzaXRlZCl7XG4vLyAgICAgICAgICAgICByZWN0KHN0YXJ0Um93LCBzdGFydENvbCwgNDAsIDQwKVxuLy8gICAgICAgICAgICAgZmlsbChcImdyZWVuXCIpO1xuLy8gICAgICAgICB9XG5cbi8vICAgICB9XG5cbi8vICAgICB0aGlzLmdldE5laWdoYm9yID0gZnVuY3Rpb24oKXtcblxuLy8gICAgICAgICAvLyBjb25zdCBuZWlnaGJvcnNJbmRpY2VzID0gW1xuLy8gICAgICAgICAvLyAgICAgW3JvdyAtIDEsIGNvbF0sXG4vLyAgICAgICAgIC8vICAgICBbcm93ICsgMSwgY29sXSxcbi8vICAgICAgICAgLy8gICAgIFtyb3csIGNvbCAtIDFdLFxuLy8gICAgICAgICAvLyAgICAgW3JvdywgY29sICsgMV0gICAgICAgICAgICBcbi8vICAgICAgICAgLy8gXVxuXG4vLyAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IFtcbi8vICAgICAgICAgICAgIGdyaWRbcm93IC0gMV1bY29sXSxcbi8vICAgICAgICAgICAgIGdyaWRbcm93ICsgMV1bY29sXSxcbi8vICAgICAgICAgICAgIGdyaWRbcm93XVtjb2wgLSAxXSxcbi8vICAgICAgICAgICAgIGdyaWRbcm93XVtjb2wgKyAxXSAgICAgICAgICAgIFxuLy8gICAgICAgICBdXG5cbi8vICAgICAgICAgLy8gY29uc3QgbmVpZ2hib3JzID0gW107XG5cbi8vICAgICAgICAgLy8gY29uc3QgdmFsaWRhdGVJZHggPSBmdW5jdGlvbiAoaWR4QXJyKSB7XG4vLyAgICAgICAgIC8vICAgICBpZihpZHhBcnIuZXZlcnkoKGlkeCkgPT4ge1xuLy8gICAgICAgICAvLyAgICAgICAgIHJldHVybiBpZHggPCAyMCAmJiBpZHggPj0gMH1cbi8vICAgICAgICAgLy8gICAgICAgICApKXtcblxuLy8gICAgICAgICAvLyAgICAgICAgIG5laWdoYm9ycy5wdXNoKGlkeEFycik7XG4vLyAgICAgICAgIC8vICAgICB9XG4vLyAgICAgICAgIC8vIH1cblxuLy8gICAgICAgICAvLyBsZXQgdG9wID0gWyhyb3cgLSAxKSwgY29sXTtcbi8vICAgICAgICAgLy8gdmFsaWRhdGVJZHgodG9wKTtcbi8vICAgICAgICAgLy8gbGV0IHJpZ2h0ID0gW3JvdywgKGNvbCsxKV07XG4vLyAgICAgICAgIC8vIHZhbGlkYXRlSWR4KHJpZ2h0KTtcbi8vICAgICAgICAgLy8gbGV0IGJvdHRvbSA9IFsocm93ICsgMSksIGNvbF07XG4vLyAgICAgICAgIC8vIHZhbGlkYXRlSWR4KGJvdHRvbSk7XG4vLyAgICAgICAgIC8vIGxldCBsZWZ0ID0gW3JvdywgKGNvbCAtIDEpXTtcbi8vICAgICAgICAgLy8gdmFsaWRhdGVJZHgobGVmdCk7XG5cbi8vICAgICAgICAgY29uc29sZS5sb2cobmVpZ2hib3JzKVxuXG4vLyAgICAgICAgIGNvbnN0IHZhbGlkTmVpZ2hib3JzID0gW107XG5cbi8vICAgICAgICAgLy8gZm9yKGxldCBpID0gMDsgaSA8IG5laWdoYm9ycy5sZW5ndGg7IGkrKyl7XG4vLyAgICAgICAgIC8vICAgICBpZiAoKG5laWdoYm9yc1tpXVswXSA8IDIwICYmIG5laWdoYm9yc1tpXVswXSA+PSAwKSAmJiAobmVpZ2hib3JzW2ldWzFdIDwgMjAgJiYgbmVpZ2hib3JzW2ldWzFdID49IDApKSB7XG4vLyAgICAgICAgIC8vICAgICAgICAgdmFsaWROZWlnaGJvcnMucHVzaChuZWlnaGJvcnNbaV0pO1xuLy8gICAgICAgICAvLyAgICAgfVxuLy8gICAgICAgICAvLyB9XG5cbi8vICAgICAgICAgLy8gY29uc3QgdmFsaWROZWlnaGJvcnMgPSBuZWlnaGJvcnMuZmlsdGVyKG5laWdoYm9yID0+IHtcbi8vICAgICAgICAgLy8gICAgIC8vIGxldCB4ID0gbmVpZ2hib3JbMF07XG4vLyAgICAgICAgIC8vICAgICAvLyBsZXQgeSA9IG5laWdoYm9yWzFdO1xuXG4vLyAgICAgICAgIC8vICAgICBpZigobmVpZ2hib3JbMF0gPCAyMCAmJiBuZWlnaGJvclswXSA+PSAwKSAmJiAobmVpZ2hib3JbMV0gPCAyMCAmJiBuZWlnaGJvclsxXSA+PSAwKSl7XG4vLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIG5laWdoYm9yO1xuLy8gICAgICAgICAvLyAgICAgfVxuLy8gICAgICAgICAvLyB9XG5cbi8vICAgICAgICAgLy8gY29uc3QgdmFsaWRhdGVOZWlnaGJvcnMgPSBmdW5jdGlvbihuZWlnaGJvcikge1xuLy8gICAgICAgICAvLyAgICAgaWYoIW5laWdoYm9yKXtcbi8vICAgICAgICAgLy8gICAgICAgICByZXR1cm4gZmFsc2U7XG4vLyAgICAgICAgIC8vICAgICB9XG4vLyAgICAgICAgIC8vICAgICAvLyBsZXQgeCA9IG5laWdoYm9yWzBdO1xuLy8gICAgICAgICAvLyAgICAgLy8gbGV0IHkgPSBuZWlnaGJvclsxXTtcblxuLy8gICAgICAgICAvLyAgICAgaWYobmVpZ2hib3Iucm93IDwgMjAgfHwgbmVpZ2hib3Iucm93ID49MCl7XG4vLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgICAgICAvLyAgICAgfSBlbHNlIGlmKG5laWdoYm9yLmNvbCA8IDIwIHx8IG5laWdoYm9yLmNvbCA+PSAwKXtcbi8vICAgICAgICAgLy8gICAgICAgICByZXR1cm4gZmFsc2U7XG4vLyAgICAgICAgIC8vICAgICB9IGVsc2V7XG4vLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRydWVcbi8vICAgICAgICAgLy8gICAgIH1cblxuLy8gICAgICAgICAvLyB9XG5cbi8vICAgICAgICAgLy8gY29uc3QgdmFsaWRhdGVOZWlnaGJvcnMgPSBmdW5jdGlvbihuZWlnaGJvcil7XG4vLyAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhuZWlnaGJvcilcbi8vICAgICAgICAgLy8gICAgIG5laWdoYm9yXG4vLyAgICAgICAgIC8vIH1cblxuLy8gICAgICAgICAvLyBjb25zdCB2YWxpZE5laWdoYm9ycyA9IG5laWdoYm9ycy5maWx0ZXIodmFsaWRhdGVOZWlnaGJvcnMpO1xuXG4vLyAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpKyspe1xuLy8gICAgICAgICAgICAgaWYobmVpZ2hib3JzW2ldICYmICEobmVpZ2hib3JzW2ldLnZpc2l0ZWQpKXtcbi8vICAgICAgICAgICAgICAgICB2YWxpZE5laWdoYm9ycy5wdXNoKG5laWdoYm9yc1tpXSlcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuXG5cbi8vICAgICAgICAgY29uc29sZS5sb2coXCJ2YWxpZFwiKSBcbi8vICAgICAgICAgY29uc29sZS5sb2codmFsaWROZWlnaGJvcnMpXG5cbi8vICAgICAgICAgbGV0IG5leHRDZWxsO1xuXG4vLyAgICAgICAgIGlmKHZhbGlkTmVpZ2hib3JzLmxlbmd0aCA+IDApe1xuLy8gICAgICAgICAgICAgbmV4dENlbGwgPSB0aGlzLmNob29zZVJhbmRvbU5laWdoYm9yKHZhbGlkTmVpZ2hib3JzKTtcbi8vICAgICAgICAgICAgIHJldHVybiBuZXh0Q2VsbDtcbi8vICAgICAgICAgfVxuLy8gICAgICAgICAvLyBsZXQgbmV4dENlbGwgPSBcblxuLy8gICAgICAgICAvLyAvL25lZWQgdG8gY2hlY2sgaWYgbmV4dENlbGwgaXMgdHJ1ZSBiYyBpdCBjb3VsZCBiZSB1bmRlZmluZWQgYXQgdGhlIGVkZ2VzXG4vLyAgICAgICAgIC8vIHdoaWxlKG5leHRDZWxsICYmIG5leHRDZWxsLnZpc2l0ZWQpe1xuLy8gICAgICAgICAgICAgLy8gICAgIG5leHRDZWxsID0gdGhpcy5jaG9vc2VSYW5kb21OZWlnaGJvcihuZWlnaGJvcnMpXG5cbi8vICAgICAgICAgICAgIC8vICAgICBpZihuZXh0Q2VsbCAmJiAhbmV4dENlbGwudmlzaXRlZCl7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gbmV4dENlbGxcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgfVxuLy8gICAgICAgICAgICAgICAgIC8vIH1cblxuLy8gICAgICAgICAgICAgICAgIC8vIGlmIChuZXh0Q2VsbCkge1xuLy8gICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVjdChzdGFydFJvdywgc3RhcnRDb2wsIDQwLCA0MClcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZpbGwoXCJwdXJwbGVcIik7XG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIH1cbi8vICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobmV4dENlbGwpXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBuZXh0Q2VsbDtcblxuLy8gICAgIH1cblxuLy8gICAgIHRoaXMuY2hvb3NlUmFuZG9tTmVpZ2hib3IgPSBmdW5jdGlvbih2YWxpZE5laWdoYm9ycykge1xuLy8gICAgICAgIHJldHVybiB2YWxpZE5laWdoYm9yc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWxpZE5laWdoYm9ycy5sZW5ndGgpXSBcbi8vICAgICB9XG5cbi8vIH1cblxuLy8gZnVuY3Rpb24gV2FsbCgpe1xuLy8gICAgIHRoaXMucHJlc2VudCA9IHRydWU7XG5cbi8vICAgICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKGksIHgsIHkpe1xuLy8gICAgICAgICBzdHJva2UoMjU1KTtcbi8vICAgICAgICAgc3dpdGNoKGkpe1xuLy8gICAgICAgICAgICAgY2FzZSAwOiBcbi8vICAgICAgICAgICAgICAgICBsaW5lKHgsIHksIHgsIHkgKyA0MClcbi8vICAgICAgICAgICAgIGNhc2UgMTpcbi8vICAgICAgICAgICAgICAgICBsaW5lKHgsIHkgKyA0MCwgeCArIDQwLCB5ICsgNDApXG4vLyAgICAgICAgICAgICBjYXNlIDI6IFxuLy8gICAgICAgICAgICAgICAgIGxpbmUoeCArIDQwLCB5ICsgNDAsIHggKyA0MCwgeSlcbi8vICAgICAgICAgICAgIGNhc2UgMzpcbi8vICAgICAgICAgICAgICAgICBsaW5lKHggKyA0MCwgeSwgeCwgeSlcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cblxud2luZG93LnNldHVwID0gc2V0dXA7XG5cbndpbmRvdy5kcmF3ID0gZHJhdztcblxuLy9wNSBjYW5ub3QgZmluZCB0aGUgZnVuY3Rpb25zLCBcbi8vc28gd2UgbmVlZCB0byBzZXQgaXQgdG8gdGhlIHdpbmRvdyBzbyB0aGUgZnggY2FuIGJlIGZvdW5kIFxuXG4vLyBjb25zdCBDZWxsID0gcmVxdWlyZSgnLi9jZWxsJyk7XG4vLyAvLyBjb25zdCBNb3ZpbmdPYmplY3QgPSByZXF1aXJlKCcuL21vdmluZ19vYmplY3RzJyk7XG4vLyAvLyBjb25zdCBVc2VyID0gcmVxdWlyZSgnLi91c2VyJyk7XG4vLyBjb25zdCBHYW1lID0gcmVxdWlyZSgnLi9nYW1lJyk7XG5cbi8vIC8vIHdpbmRvdy5Nb3ZpbmdPYmplY3QgPSBNb3ZpbmdPYmplY3Q7XG5cbi8vIGNvbnN0IGdyaWQgPSBbXTtcblxuLy8gbGV0IGN1cnJlbnQ7XG5cbi8vIGNvbnN0IHN0YWNrID0gW107XG5cbi8vIGxldCBnYW1lID0gbmV3IEdhbWUoKTtcblxuLy8gbGV0IG1hcCA9IGZhbHNlO1xuXG4vLyBsZXQgZ2FtZUVuZCA9IGZhbHNlO1xuXG4vLyAvLyBjb25zdCB1c2VyID0gbmV3IFVzZXIoKTtcblxuLy8gZnVuY3Rpb24gc2V0dXAoKSB7XG4vLyAgIGNyZWF0ZUNhbnZhcyg4MDAsIDgwMCk7XG4vLyAvLyAgIGNvbHMgPSAxMDtcbi8vIC8vICAgcm93cyA9IDEwO1xuXG4vLyAgIGZvcihsZXQgeCA9IDA7IHggPCAyMDsgeCsrKXtcbi8vICAgICAgIGdyaWRbeF0gPSBbXTtcbi8vICAgICAgIGZvcihsZXQgeSA9IDA7IHkgPCAyMDsgeSsrKXtcbi8vICAgICAgICAgZ3JpZFt4XS5wdXNoKG5ldyBDZWxsKHgsIHksIGdyaWQsIHN0YWNrKSlcbi8vICAgICAgIH1cbi8vICAgfVxuXG4vLyAgIGxldCBjdXJyZW50X3JvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKTtcbi8vICAgbGV0IGN1cnJlbnRfY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApO1xuXG4vLyAgIGN1cnJlbnQgPSBncmlkW2N1cnJlbnRfcm93XVtjdXJyZW50X2NvbF07XG5cbi8vICAgLy8gICBjb25zb2xlLmxvZyhcImN1cnJlbnRcIilcbi8vIC8vICAgY29uc29sZS5sb2coY3VycmVudClcbiAgXG4vLyAgIGZyYW1lUmF0ZSgxMDApO1xuICBcbi8vIH1cblxuLy8gZnVuY3Rpb24gZHJhdygpIHtcbi8vICAgICBiYWNrZ3JvdW5kKDUxKVxuXG4vLyAgICAgaWYoIW1hcCAmJiAhZ2FtZUVuZCl7XG4vLyAgICAgICAgIGlmIChjdXJyZW50KSB7XG4vLyAgICAgICAgICAgICBjdXJyZW50LnZpc2l0ZWQgPSB0cnVlO1xuLy8gICAgICAgICAvLyBjdXJyZW50LmhpZ2hsaWdodCgpO1xuLy8gICAgICAgICAgICAgc3RhY2sucHVzaChjdXJyZW50KTtcbi8vICAgICAgICAgfVxuICAgIFxuICAgIFxuLy8gICAgICAgICAvLyBsZXQgbmV4dENlbGwgPSBjdXJyZW50LmdldE5leHRDZWxsKGN1cnJlbnQucm93LCBjdXJyZW50LmNvbCk7XG4vLyAgICAgICAgIGxldCBuZXh0Q2VsbCA9IGN1cnJlbnQuZ2V0TmVpZ2hib3IoKTtcbiAgICBcbi8vICAgICAgICAgLy8gY29uc29sZS5sb2coXCJuZXh0Y2VsbFwiKVxuLy8gICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXh0Q2VsbCk7XG4gICAgICAgIFxuLy8gICAgICAgICB0aGlzLnJlbW92ZVdhbGxzID0gZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZ3JpZCl7XG4vLyAgICAgICAgICAgICBjb25zdCBjaGFuZ2VYID0gY3VycmVudC5yb3cgLSBuZXh0LnJvdztcbi8vICAgICAgICAgICAgIGNvbnN0IGNoYW5nZVkgPSBjdXJyZW50LmNvbCAtIG5leHQuY29sO1xuICAgICAgICAgICAgXG4vLyAgICAgICAgICAgICAvLyBjdXJyZW50LndhbGxzLmZvckVhY2god2FsbCA9PiB3YWxsLnByZXNlbnQgPSBmYWxzZSlcbiAgICAgICAgICAgIFxuICAgIFxuLy8gICAgICAgICAgICAgc3dpdGNoKGNoYW5nZVgpe1xuLy8gICAgICAgICAgICAgICAgIGNhc2UgMTpcbi8vICAgICAgICAgICAgICAgICAgICAgY3VycmVudC53YWxsc1swXS5wcmVzZW50ID0gZmFsc2U7ICBcbi8vICAgICAgICAgICAgICAgICAgICAgbmV4dC53YWxsc1syXS5wcmVzZW50ID0gZmFsc2U7XG4vLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gICAgICAgICAgICAgICAgIGNhc2UgLTE6XG4vLyAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQud2FsbHNbMl0ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICBuZXh0LndhbGxzWzBdLnByZXNlbnQgPSBmYWxzZTtcbi8vICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgICAgICB9XG4gICAgXG4vLyAgICAgICAgICAgICBzd2l0Y2ggKGNoYW5nZVkpIHtcbi8vICAgICAgICAgICAgICAgICBjYXNlIDE6XG4vLyAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQud2FsbHNbM10ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICBuZXh0LndhbGxzWzFdLnByZXNlbnQgPSBmYWxzZTtcbi8vICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgICAgICAgICAgY2FzZSAtMTpcbi8vICAgICAgICAgICAgICAgICAgICAgY3VycmVudC53YWxsc1sxXS5wcmVzZW50ID0gZmFsc2U7XG4vLyAgICAgICAgICAgICAgICAgICAgIG5leHQud2FsbHNbM10ucHJlc2VudCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgIH1cbiAgICBcbi8vICAgICAgICAgICAgIC8vIGNvbnN0IGZpcnN0Um93ID0gZ3JpZFswXTtcbi8vICAgICAgICAgICAgIC8vIGNvbnN0IGxhc3RSb3cgPSBncmlkWzE5XTtcbiAgICBcbi8vICAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RSb3cubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgICAgICAgIC8vICAgICBmaXJzdFJvd1tpXS53YWxsc1szXS5wcmVzZW50ID0gdHJ1ZVxuLy8gICAgICAgICAgICAgLy8gfVxuICAgIFxuLy8gICAgICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0Um93Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICAgICAgICAvLyAgICAgbGFzdFJvd1tpXS53YWxsc1sxXS5wcmVzZW50ID0gdHJ1ZVxuLy8gICAgICAgICAgICAgLy8gfVxuICAgIFxuLy8gICAgICAgICAgICAgLy8gY29uc3QgZmlyc3RDb2wgPSBncmlkLmZpbHRlcigoY2VsbCkgPT4ge1xuLy8gICAgICAgICAgICAgLy8gICAgIHJldHVybiBjZWxsLmNvbCA9PT0gMFxuLy8gICAgICAgICAgICAgLy8gfSlcbiAgICBcbi8vICAgICAgICAgICAgIC8vIGNvbnN0IGxhc3RDb2wgPSBncmlkLmZpbHRlcigoY2VsbCkgPT4ge1xuLy8gICAgICAgICAgICAgLy8gICAgIHJldHVybiBjZWxsLmNvbCA9PT0gMTlcbi8vICAgICAgICAgICAgIC8vIH0pXG4gICAgXG4vLyAgICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGZpcnN0Q29sLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICAgICAgICAvLyAgICAgZmlyc3RDb2xbaV0ud2FsbHNbMl0ucHJlc2VudCA9IHRydWU7XG4vLyAgICAgICAgICAgICAvLyB9XG4gICAgXG4vLyAgICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RDb2wubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgICAgICAgIC8vICAgICBsYXN0Q29sW2ldLndhbGxzWzBdLnByZXNlbnQgPSB0cnVlO1xuLy8gICAgICAgICAgICAgLy8gfVxuLy8gICAgICAgICB9IFxuICAgIFxuLy8gICAgICAgICBpZihuZXh0Q2VsbCl7XG4vLyAgICAgICAgICAgICBuZXh0Q2VsbC52aXNpdGVkID0gdHJ1ZTtcbi8vICAgICAgICAgICAgIHRoaXMucmVtb3ZlV2FsbHMoY3VycmVudCwgbmV4dENlbGwsIGdyaWQpO1xuLy8gICAgICAgICAgICAgY3VycmVudCA9IG5leHRDZWxsO1xuLy8gICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzdGFja1wiKVxuLy8gICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RhY2spO1xuLy8gICAgICAgICB9IGVsc2UgaWYoc3RhY2subGVuZ3RoID4gMCl7XG4vLyAgICAgICAgICAgICBwb3RlbnRpYWxSZXN0YXJ0ID0gc3RhY2sucG9wKClcbi8vICAgICAgICAgICAgICAgICB3aGlsZSAocG90ZW50aWFsUmVzdGFydCAmJiAhcG90ZW50aWFsUmVzdGFydC5nZXROZWlnaGJvcigpKXtcbi8vICAgICAgICAgICAgICAgICAgICAgaWYoIXN0YWNrLmxlbmd0aCl7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwb3RlbnRpYWxSZXN0YXJ0LnZpc2l0ZWQgPSB0cnVlXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXAgPSB0cnVlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbm9Mb29wKCk7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHBvdGVudGlhbFJlc3RhcnQgPSBzdGFjay5wb3AoKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICBjdXJyZW50ID0gcG90ZW50aWFsUmVzdGFydDtcbi8vICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJyZW50KVxuLy8gICAgICAgICAvLyB9IGVsc2UgaWYoYWxsVmlzaXRlZCkge1xuLy8gICAgICAgICAvLyAgICAgbm9Mb29wKCk7XG4vLyAgICAgICAgIH1cbiAgICBcbiAgICBcbi8vICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncmlkLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyaWRbaV0ubGVuZ3RoOyBqKyspIHtcbi8vICAgICAgICAgICAgICAgICBncmlkW2ldW2pdLnJlbmRlcigpO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG5cbi8vICAgICAgICAgZ2FtZS51c2VyUmVuZGVyKCk7XG4vLyAgICAgfSBlbHNlIGlmKG1hcCAmJiAhZ2FtZUVuZCl7XG4vLyAgICAgICAgIC8vIGxvb3AoKVxuLy8gICAgICAgICBjb25zb2xlLmxvZyhcImhpXCIpXG4vLyAgICAgICAgIGdhbWUudXNlclJlbmRlcigpO1xuLy8gICAgICAgICAvLyBnYW1lLnVzZXJNb3ZlKCk7XG4vLyAgICAgICAgIGtleVByZXNzZWQoKTtcbiAgICAgICAgXG4vLyAgICAgfVxuICAgIFxuLy8gICAgIC8vIGN1cnJlbnQuaGlnaGxpZ2h0KCk7XG4gICAgXG4vLyAgICAgZnVuY3Rpb24ga2V5UHJlc3NlZCgpe1xuLy8gICAgICAgICAvLyBsb29wKCk7XG4vLyAgICAgICAgIGdhbWUudXNlck1vdmUoKTtcbi8vICAgICAgICAgLy8gbG9vcCgpICAgICAgICBcbi8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIH1cblxuLy8gICAgIGtleVByZXNzZWQoKTtcblxuLy8gICAgIC8vIHVzZXIucmVuZGVyKCk7XG5cbiAgICBcblxuLy8gICAgIC8vIHJlZHJhdygpO1xuICAgIFxuLy8gICAgIC8vIHdoaWxlICghZ2FtZS5lbmQoKSl7XG4vLyAgICAgLy8gICAgIGdhbWUudXNlck1vdmUoKVxuLy8gICAgIC8vIH1cblxuLy8gfVxuXG4vLyAvLyBmdW5jdGlvbiBDZWxsKHJvdywgY29sKSB7XG4vLyAvLyAgICAgdGhpcy5yb3cgPSByb3c7XG4vLyAvLyAgICAgdGhpcy5jb2wgPSBjb2w7XG4vLyAvLyAgICAgdGhpcy53YWxscyA9IFtuZXcgV2FsbCgpLCBuZXcgV2FsbCgpLCBuZXcgV2FsbCgpLCBuZXcgV2FsbCgpXTtcbi8vIC8vICAgICB0aGlzLnZpc2l0ZWQgPSBmYWxzZTtcblxuLy8gLy8gICAgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuLy8gLy8gICAgICAgICBjb25zdCBzdGFydFJvdyA9IHRoaXMucm93ICogNDA7XG4vLyAvLyAgICAgICAgIGNvbnN0IHN0YXJ0Q29sID0gdGhpcy5jb2wgKiA0MDtcblxuLy8gLy8gICAgICAgICAvLyB4LCB5LCB3aWR0aCwgaGVpZ2h0XG4vLyAvLyAgICAgICAgIC8vIHJlY3Qoc3RhcnRYLCBzdGFydFksIDQwLCA0MClcbi8vIC8vICAgICAgICAgLy8gbm9GaWxsKCk7XG4vLyAvLyAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLndhbGxzLmxlbmd0aDsgaSsrKXtcbi8vIC8vICAgICAgICAgICAgIHRoaXMud2FsbHNbaV0ucmVuZGVyKGksIHN0YXJ0Um93LCBzdGFydENvbCk7XG4vLyAvLyAgICAgICAgIH1cblxuLy8gLy8gICAgICAgICBpZih0aGlzLnZpc2l0ZWQpe1xuLy8gLy8gICAgICAgICAgICAgcmVjdChzdGFydFJvdywgc3RhcnRDb2wsIDQwLCA0MClcbi8vIC8vICAgICAgICAgICAgIGZpbGwoXCJncmVlblwiKTtcbi8vIC8vICAgICAgICAgfVxuICAgICAgICBcbi8vIC8vICAgICB9XG5cbi8vIC8vICAgICB0aGlzLmdldE5laWdoYm9yID0gZnVuY3Rpb24oKXtcbiAgICAgICAgXG4vLyAvLyAgICAgICAgIC8vIGNvbnN0IG5laWdoYm9yc0luZGljZXMgPSBbXG4vLyAvLyAgICAgICAgIC8vICAgICBbcm93IC0gMSwgY29sXSxcbi8vIC8vICAgICAgICAgLy8gICAgIFtyb3cgKyAxLCBjb2xdLFxuLy8gLy8gICAgICAgICAvLyAgICAgW3JvdywgY29sIC0gMV0sXG4vLyAvLyAgICAgICAgIC8vICAgICBbcm93LCBjb2wgKyAxXSAgICAgICAgICAgIFxuLy8gLy8gICAgICAgICAvLyBdXG5cbi8vIC8vICAgICAgICAgY29uc3QgbmVpZ2hib3JzID0gW1xuLy8gLy8gICAgICAgICAgICAgZ3JpZFtyb3cgLSAxXVtjb2xdLFxuLy8gLy8gICAgICAgICAgICAgZ3JpZFtyb3cgKyAxXVtjb2xdLFxuLy8gLy8gICAgICAgICAgICAgZ3JpZFtyb3ddW2NvbCAtIDFdLFxuLy8gLy8gICAgICAgICAgICAgZ3JpZFtyb3ddW2NvbCArIDFdICAgICAgICAgICAgXG4vLyAvLyAgICAgICAgIF1cblxuLy8gLy8gICAgICAgICAvLyBjb25zdCBuZWlnaGJvcnMgPSBbXTtcblxuLy8gLy8gICAgICAgICAvLyBjb25zdCB2YWxpZGF0ZUlkeCA9IGZ1bmN0aW9uIChpZHhBcnIpIHtcbi8vIC8vICAgICAgICAgLy8gICAgIGlmKGlkeEFyci5ldmVyeSgoaWR4KSA9PiB7XG4vLyAvLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIGlkeCA8IDIwICYmIGlkeCA+PSAwfVxuLy8gLy8gICAgICAgICAvLyAgICAgICAgICkpe1xuICAgICAgICAgICAgICAgIFxuLy8gLy8gICAgICAgICAvLyAgICAgICAgIG5laWdoYm9ycy5wdXNoKGlkeEFycik7XG4vLyAvLyAgICAgICAgIC8vICAgICB9XG4vLyAvLyAgICAgICAgIC8vIH1cblxuLy8gLy8gICAgICAgICAvLyBsZXQgdG9wID0gWyhyb3cgLSAxKSwgY29sXTtcbi8vIC8vICAgICAgICAgLy8gdmFsaWRhdGVJZHgodG9wKTtcbi8vIC8vICAgICAgICAgLy8gbGV0IHJpZ2h0ID0gW3JvdywgKGNvbCsxKV07XG4vLyAvLyAgICAgICAgIC8vIHZhbGlkYXRlSWR4KHJpZ2h0KTtcbi8vIC8vICAgICAgICAgLy8gbGV0IGJvdHRvbSA9IFsocm93ICsgMSksIGNvbF07XG4vLyAvLyAgICAgICAgIC8vIHZhbGlkYXRlSWR4KGJvdHRvbSk7XG4vLyAvLyAgICAgICAgIC8vIGxldCBsZWZ0ID0gW3JvdywgKGNvbCAtIDEpXTtcbi8vIC8vICAgICAgICAgLy8gdmFsaWRhdGVJZHgobGVmdCk7XG5cbi8vIC8vICAgICAgICAgY29uc29sZS5sb2cobmVpZ2hib3JzKVxuXG4vLyAvLyAgICAgICAgIGNvbnN0IHZhbGlkTmVpZ2hib3JzID0gW107XG5cbi8vIC8vICAgICAgICAgLy8gZm9yKGxldCBpID0gMDsgaSA8IG5laWdoYm9ycy5sZW5ndGg7IGkrKyl7XG4vLyAvLyAgICAgICAgIC8vICAgICBpZiAoKG5laWdoYm9yc1tpXVswXSA8IDIwICYmIG5laWdoYm9yc1tpXVswXSA+PSAwKSAmJiAobmVpZ2hib3JzW2ldWzFdIDwgMjAgJiYgbmVpZ2hib3JzW2ldWzFdID49IDApKSB7XG4vLyAvLyAgICAgICAgIC8vICAgICAgICAgdmFsaWROZWlnaGJvcnMucHVzaChuZWlnaGJvcnNbaV0pO1xuLy8gLy8gICAgICAgICAvLyAgICAgfVxuLy8gLy8gICAgICAgICAvLyB9XG5cbi8vIC8vICAgICAgICAgLy8gY29uc3QgdmFsaWROZWlnaGJvcnMgPSBuZWlnaGJvcnMuZmlsdGVyKG5laWdoYm9yID0+IHtcbi8vIC8vICAgICAgICAgLy8gICAgIC8vIGxldCB4ID0gbmVpZ2hib3JbMF07XG4vLyAvLyAgICAgICAgIC8vICAgICAvLyBsZXQgeSA9IG5laWdoYm9yWzFdO1xuXG4vLyAvLyAgICAgICAgIC8vICAgICBpZigobmVpZ2hib3JbMF0gPCAyMCAmJiBuZWlnaGJvclswXSA+PSAwKSAmJiAobmVpZ2hib3JbMV0gPCAyMCAmJiBuZWlnaGJvclsxXSA+PSAwKSl7XG4vLyAvLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIG5laWdoYm9yO1xuLy8gLy8gICAgICAgICAvLyAgICAgfVxuLy8gLy8gICAgICAgICAvLyB9XG5cbi8vIC8vICAgICAgICAgLy8gY29uc3QgdmFsaWRhdGVOZWlnaGJvcnMgPSBmdW5jdGlvbihuZWlnaGJvcikge1xuLy8gLy8gICAgICAgICAvLyAgICAgaWYoIW5laWdoYm9yKXtcbi8vIC8vICAgICAgICAgLy8gICAgICAgICByZXR1cm4gZmFsc2U7XG4vLyAvLyAgICAgICAgIC8vICAgICB9XG4vLyAvLyAgICAgICAgIC8vICAgICAvLyBsZXQgeCA9IG5laWdoYm9yWzBdO1xuLy8gLy8gICAgICAgICAvLyAgICAgLy8gbGV0IHkgPSBuZWlnaGJvclsxXTtcblxuLy8gLy8gICAgICAgICAvLyAgICAgaWYobmVpZ2hib3Iucm93IDwgMjAgfHwgbmVpZ2hib3Iucm93ID49MCl7XG4vLyAvLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xuLy8gLy8gICAgICAgICAvLyAgICAgfSBlbHNlIGlmKG5laWdoYm9yLmNvbCA8IDIwIHx8IG5laWdoYm9yLmNvbCA+PSAwKXtcbi8vIC8vICAgICAgICAgLy8gICAgICAgICByZXR1cm4gZmFsc2U7XG4vLyAvLyAgICAgICAgIC8vICAgICB9IGVsc2V7XG4vLyAvLyAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRydWVcbi8vIC8vICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIFxuLy8gLy8gICAgICAgICAvLyB9XG5cbi8vIC8vICAgICAgICAgLy8gY29uc3QgdmFsaWRhdGVOZWlnaGJvcnMgPSBmdW5jdGlvbihuZWlnaGJvcil7XG4vLyAvLyAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhuZWlnaGJvcilcbi8vIC8vICAgICAgICAgLy8gICAgIG5laWdoYm9yXG4vLyAvLyAgICAgICAgIC8vIH1cblxuLy8gLy8gICAgICAgICAvLyBjb25zdCB2YWxpZE5laWdoYm9ycyA9IG5laWdoYm9ycy5maWx0ZXIodmFsaWRhdGVOZWlnaGJvcnMpO1xuXG4vLyAvLyAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpKyspe1xuLy8gLy8gICAgICAgICAgICAgaWYobmVpZ2hib3JzW2ldICYmICEobmVpZ2hib3JzW2ldLnZpc2l0ZWQpKXtcbi8vIC8vICAgICAgICAgICAgICAgICB2YWxpZE5laWdoYm9ycy5wdXNoKG5laWdoYm9yc1tpXSlcbi8vIC8vICAgICAgICAgICAgIH1cbi8vIC8vICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4vLyAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwidmFsaWRcIikgXG4vLyAvLyAgICAgICAgIGNvbnNvbGUubG9nKHZhbGlkTmVpZ2hib3JzKVxuICAgICAgICBcbi8vIC8vICAgICAgICAgbGV0IG5leHRDZWxsO1xuXG4vLyAvLyAgICAgICAgIGlmKHZhbGlkTmVpZ2hib3JzLmxlbmd0aCA+IDApe1xuLy8gLy8gICAgICAgICAgICAgbmV4dENlbGwgPSB0aGlzLmNob29zZVJhbmRvbU5laWdoYm9yKHZhbGlkTmVpZ2hib3JzKTtcbi8vIC8vICAgICAgICAgICAgIHJldHVybiBuZXh0Q2VsbDtcbi8vIC8vICAgICAgICAgfVxuLy8gLy8gICAgICAgICAvLyBsZXQgbmV4dENlbGwgPSBcbiAgICAgICAgXG4vLyAvLyAgICAgICAgIC8vIC8vbmVlZCB0byBjaGVjayBpZiBuZXh0Q2VsbCBpcyB0cnVlIGJjIGl0IGNvdWxkIGJlIHVuZGVmaW5lZCBhdCB0aGUgZWRnZXNcbi8vIC8vICAgICAgICAgLy8gd2hpbGUobmV4dENlbGwgJiYgbmV4dENlbGwudmlzaXRlZCl7XG4vLyAvLyAgICAgICAgICAgICAvLyAgICAgbmV4dENlbGwgPSB0aGlzLmNob29zZVJhbmRvbU5laWdoYm9yKG5laWdoYm9ycylcbiAgICAgICAgICAgIFxuLy8gLy8gICAgICAgICAgICAgLy8gICAgIGlmKG5leHRDZWxsICYmICFuZXh0Q2VsbC52aXNpdGVkKXtcbi8vIC8vICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHJldHVybiBuZXh0Q2VsbFxuLy8gLy8gICAgICAgICAgICAgICAgIC8vICAgICB9XG4vLyAvLyAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIFxuLy8gLy8gICAgICAgICAgICAgICAgIC8vIGlmIChuZXh0Q2VsbCkge1xuLy8gLy8gICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVjdChzdGFydFJvdywgc3RhcnRDb2wsIDQwLCA0MClcbi8vIC8vICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZpbGwoXCJwdXJwbGVcIik7XG4vLyAvLyAgICAgICAgICAgICAgICAgICAgIC8vIH1cbi8vIC8vICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobmV4dENlbGwpXG4vLyAvLyAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBuZXh0Q2VsbDtcbiAgICAgICAgICAgXG4vLyAvLyAgICAgfVxuICAgIFxuLy8gLy8gICAgIHRoaXMuY2hvb3NlUmFuZG9tTmVpZ2hib3IgPSBmdW5jdGlvbih2YWxpZE5laWdoYm9ycykge1xuLy8gLy8gICAgICAgIHJldHVybiB2YWxpZE5laWdoYm9yc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWxpZE5laWdoYm9ycy5sZW5ndGgpXSBcbi8vIC8vICAgICB9XG5cbi8vIC8vIH1cblxuLy8gLy8gZnVuY3Rpb24gV2FsbCgpe1xuLy8gLy8gICAgIHRoaXMucHJlc2VudCA9IHRydWU7XG5cbi8vIC8vICAgICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKGksIHgsIHkpe1xuLy8gLy8gICAgICAgICBzdHJva2UoMjU1KTtcbi8vIC8vICAgICAgICAgc3dpdGNoKGkpe1xuLy8gLy8gICAgICAgICAgICAgY2FzZSAwOiBcbi8vIC8vICAgICAgICAgICAgICAgICBsaW5lKHgsIHksIHgsIHkgKyA0MClcbi8vIC8vICAgICAgICAgICAgIGNhc2UgMTpcbi8vIC8vICAgICAgICAgICAgICAgICBsaW5lKHgsIHkgKyA0MCwgeCArIDQwLCB5ICsgNDApXG4vLyAvLyAgICAgICAgICAgICBjYXNlIDI6IFxuLy8gLy8gICAgICAgICAgICAgICAgIGxpbmUoeCArIDQwLCB5ICsgNDAsIHggKyA0MCwgeSlcbi8vIC8vICAgICAgICAgICAgIGNhc2UgMzpcbi8vIC8vICAgICAgICAgICAgICAgICBsaW5lKHggKyA0MCwgeSwgeCwgeSlcbi8vIC8vICAgICAgICAgfVxuLy8gLy8gICAgIH1cbi8vIC8vIH1cblxuLy8gd2luZG93LnNldHVwID0gc2V0dXA7XG5cbi8vIHdpbmRvdy5kcmF3ID0gZHJhdztcblxuLy8gLy9wNSBjYW5ub3QgZmluZCB0aGUgZnVuY3Rpb25zLCBcbi8vIC8vc28gd2UgbmVlZCB0byBzZXQgaXQgdG8gdGhlIHdpbmRvdyBzbyB0aGUgZnggY2FuIGJlIGZvdW5kICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./maze.js":
/*!*****************!*\
  !*** ./maze.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function Maze(current, grid, game) {\n\n    this.current = current;\n    this.grid = grid;\n    this.stack = [];\n    this.map = false;\n    this.game = game;\n\n    this.draw = function () {\n\n        background(51)\n\n        // if (!map && !gameEnd) {\n        if (this.current) {\n            this.current.visited = true;\n            // this.current.highlight();\n            this.stack.push(this.current);\n        }\n\n\n        // let nextCell = this.current.getNextCell(this.current.row, this.current.col);\n        let nextCell = this.current.getNeighbor();\n\n        // console.log(\"nextcell\")\n        // console.log(nextCell);\n\n        removeWalls = function (current, next, grid) {\n            const changeX = current.row - next.row;\n            const changeY = current.col - next.col;\n\n            // current.walls.forEach(wall => wall.present = false)\n\n\n            switch (changeX) {\n                case 1:\n                    current.walls[0].present = false;\n                    next.walls[2].present = false;\n                    break;\n                case -1:\n                    current.walls[2].present = false;\n                    next.walls[0].present = false;\n                    break;\n            }\n\n            switch (changeY) {\n                case 1:\n                    current.walls[3].present = false;\n                    next.walls[1].present = false;\n                    break;\n                case -1:\n                    current.walls[1].present = false;\n                    next.walls[3].present = false;\n                    break;\n            }\n\n            // const firstRow = grid[0];\n            // const lastRow = grid[19];\n\n            // for (let i = 0; i < firstRow.length; i++) {\n            //     firstRow[i].walls[3].present = true\n            // }\n\n            // for (let i = 0; i < lastRow.length; i++) {\n            //     lastRow[i].walls[1].present = true\n            // }\n\n            // const firstCol = grid.filter((cell) => {\n            //     return cell.col === 0\n            // })\n\n            // const lastCol = grid.filter((cell) => {\n            //     return cell.col === 19\n            // })\n\n            // for (let i = 0; i < firstCol.length; i++) {\n            //     firstCol[i].walls[2].present = true;\n            // }\n\n            // for (let i = 0; i < lastCol.length; i++) {\n            //     lastCol[i].walls[0].present = true;\n            // }\n        }\n\n        if (nextCell) {\n            nextCell.visited = true;\n            removeWalls(this.current, nextCell, grid);\n            this.current = nextCell;\n            // console.log(\"this.stack\")\n            // console.log(this.stack);\n        } else if (this.stack.length > 0) {\n            potentialRestart = this.stack.pop()\n            while (potentialRestart && !potentialRestart.getNeighbor()) {\n                if (!this.stack.length) {\n                    potentialRestart.visited = true\n                    // game.userMove();\n                    this.map = true;\n                    break;\n                    console.log(\"finish\")\n                    if (map) {\n                        console.log(\"hi\")\n                        game.userMove();\n                    }\n                    // noLoop();\n                    // break;\n                } else {\n                    potentialRestart = this.stack.pop();\n                }\n            }\n            this.current = potentialRestart;\n            // console.log(this.this.current)\n            // } else if(allVisited) {\n            //     noLoop();\n        }\n\n\n        for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n                grid[i][j].render();\n            }\n        }\n\n        //     game.start();\n        // } else if (map && !gameEnd) {\n        //     game.start();\n        //     game.userMove();\n        //     // keyPressed();\n\n        // }\n\n        // // this.current.highlight();\n\n        // function keyPressed() {\n        //     game.userMove();\n        //     // redraw();\n        //     return false;\n        // }\n\n        // keyPressed();\n\n        // user.render();\n\n\n\n        // redraw();\n\n        // while (!game.end()){\n        //     game.userMove()\n        // }\n\n    }\n\n    // this.mapComplete = function(){\n    //     return this.map;\n    // }\n\n}\n\nmodule.exports = Maze;\n\n// window.draw = draw;\n\n// class Maze{\n//     constructor(current){\n//         this.current = current;\n//     }\n\n//     draw(){\n//         background(51)\n\n//         // if (!map && !gameEnd) {\n//             if (this.current) {\n//                 this.current.visited = true;\n//                 // this.current.highlight();\n//                 stack.push(this.current);\n//             }\n\n\n//             // let nextCell = this.current.getNextCell(this.current.row, this.current.col);\n//             let nextCell = this.current.getNeighbor();\n\n//             // console.log(\"nextcell\")\n//             // console.log(nextCell);\n\n//             removeWalls = function (this.current, next, grid) {\n//                 const changeX = this.current.row - next.row;\n//                 const changeY = this.current.col - next.col;\n\n//                 // this.current.walls.forEach(wall => wall.present = false)\n\n\n//                 switch (changeX) {\n//                     case 1:\n//                         this.current.walls[0].present = false;\n//                         next.walls[2].present = false;\n//                         break;\n//                     case -1:\n//                         this.current.walls[2].present = false;\n//                         next.walls[0].present = false;\n//                         break;\n//                 }\n\n//                 switch (changeY) {\n//                     case 1:\n//                         this.current.walls[3].present = false;\n//                         next.walls[1].present = false;\n//                         break;\n//                     case -1:\n//                         this.current.walls[1].present = false;\n//                         next.walls[3].present = false;\n//                         break;\n//                 }\n\n//                 // const firstRow = grid[0];\n//                 // const lastRow = grid[19];\n\n//                 // for (let i = 0; i < firstRow.length; i++) {\n//                 //     firstRow[i].walls[3].present = true\n//                 // }\n\n//                 // for (let i = 0; i < lastRow.length; i++) {\n//                 //     lastRow[i].walls[1].present = true\n//                 // }\n\n//                 // const firstCol = grid.filter((cell) => {\n//                 //     return cell.col === 0\n//                 // })\n\n//                 // const lastCol = grid.filter((cell) => {\n//                 //     return cell.col === 19\n//                 // })\n\n//                 // for (let i = 0; i < firstCol.length; i++) {\n//                 //     firstCol[i].walls[2].present = true;\n//                 // }\n\n//                 // for (let i = 0; i < lastCol.length; i++) {\n//                 //     lastCol[i].walls[0].present = true;\n//                 // }\n//             }\n\n//             if (nextCell) {\n//                 nextCell.visited = true;\n//                 this.removeWalls(this.current, nextCell, grid);\n//                 this.current = nextCell;\n//                 // console.log(\"stack\")\n//                 // console.log(stack);\n//             } else if (stack.length > 0) {\n//                 potentialRestart = stack.pop()\n//                 while (potentialRestart && !potentialRestart.getNeighbor()) {\n//                     if (!stack.length) {\n//                         potentialRestart.visited = true\n//                         map = true;\n//                         // noLoop();\n//                         // break;\n//                     } else {\n//                         potentialRestart = stack.pop();\n//                     }\n//                 }\n//                 this.current = potentialRestart;\n//                 // console.log(this.current)\n//                 // } else if(allVisited) {\n//                 //     noLoop();\n//             }\n\n\n//             for (let i = 0; i < grid.length; i++) {\n//                 for (let j = 0; j < grid[i].length; j++) {\n//                     grid[i][j].render();\n//                 }\n//             }\n\n//         //     game.start();\n//         // } else if (map && !gameEnd) {\n//         //     game.start();\n//         //     game.userMove();\n//         //     // keyPressed();\n\n//         // }\n\n//         // // current.highlight();\n\n//         // function keyPressed() {\n//         //     game.userMove();\n//         //     // redraw();\n//         //     return false;\n//         // }\n\n//         // keyPressed();\n\n//     // user.render();\n\n\n\n//     // redraw();\n\n//     // while (!game.end()){\n//     //     game.userMove()\n//     // }\n\n//     }\n\n// }\n\n// module.exports = Maze;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./maze.js\n");

/***/ }),

/***/ "./user.js":
/*!*****************!*\
  !*** ./user.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function User() {\n    this.row = 19;\n    this.col = 19;\n    this.radius = 10;\n    this.pos = [0, 0]\n\n    const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n    let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n    this.updatePos = function (posChange) {\n        switch (posChange[0]) {\n            case \"x\":\n                let updatedX = this.pos[0] + posChange[1];\n                this.pos = [updatedX, this.pos[1]];\n            case \"y\":\n                let updatedY = this.pos[1] + posChange[1];\n                this.pos = [this.pos[1], updatedY];\n        }\n    }\n\n\n    this.render = function (x, y) {\n\n        fill(currentColor);\n        ellipse((x + 20), (y + 20), 15, 15);\n    }\n\n    this.draw = function () {\n        let x = this.pos[0];\n        let y = this.pos[1];\n        // const keypress = event.keyCode;\n        // console.log(event);\n        if (keyIsDown(LEFT_ARROW)) {\n            // console.log(this.user.pos)\n            this.updatePos([\"y\", -40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n\n        if (keyIsDown(RIGHT_ARROW)) {\n            this.updatePos([\"y\", 40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n\n        if (keyIsDown(UP_ARROW)) {\n            this.updatePos([\"x\", -40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n\n        if (keyIsDown(DOWN_ARROW)) {\n            this.updatePos([\"x\", 40]);\n            this.render(this.pos[0], this.pos[1]);\n        }\n    }\n}\n\nmodule.exports = User;\n\n// function User(){\n//     this.row = 19;\n//     this.col = 19;\n//     this.radius = 10;\n//     this.pos = [0, 0]\n\n//     const colors = [\"lightcoral\", \"orange\", \"Chartreuse\", \"darkcyan\", \"darkorchid\"];\n//     let currentColor = colors[Math.floor(Math.random() * colors.length)];\n\n    \n//     this.updatePos = function(posChange){\n//         switch(posChange[0]){\n//             case \"x\":\n//                 let updatedX = this.pos[0] + posChange[1];\n//                 this.pos = [updatedX, this.pos[1]];\n//             case \"y\":\n//                 let updatedY = this.pos[1] + posChange[1];\n//                 this.pos = [this.pos[1], updatedY]; \n//         }\n//     }\n\n    \n//     this.render = function(x, y) {\n\n//         fill(currentColor);\n//         ellipse(19, 19, 15, 15);\n//     }\n// }\n\n// module.exports = User;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91c2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdXNlci5qcz9iYjMzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIFVzZXIoKSB7XG4gICAgdGhpcy5yb3cgPSAxOTtcbiAgICB0aGlzLmNvbCA9IDE5O1xuICAgIHRoaXMucmFkaXVzID0gMTA7XG4gICAgdGhpcy5wb3MgPSBbMCwgMF1cblxuICAgIGNvbnN0IGNvbG9ycyA9IFtcImxpZ2h0Y29yYWxcIiwgXCJvcmFuZ2VcIiwgXCJDaGFydHJldXNlXCIsIFwiZGFya2N5YW5cIiwgXCJkYXJrb3JjaGlkXCJdO1xuICAgIGxldCBjdXJyZW50Q29sb3IgPSBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldO1xuXG4gICAgdGhpcy51cGRhdGVQb3MgPSBmdW5jdGlvbiAocG9zQ2hhbmdlKSB7XG4gICAgICAgIHN3aXRjaCAocG9zQ2hhbmdlWzBdKSB7XG4gICAgICAgICAgICBjYXNlIFwieFwiOlxuICAgICAgICAgICAgICAgIGxldCB1cGRhdGVkWCA9IHRoaXMucG9zWzBdICsgcG9zQ2hhbmdlWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gW3VwZGF0ZWRYLCB0aGlzLnBvc1sxXV07XG4gICAgICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgICAgICAgIGxldCB1cGRhdGVkWSA9IHRoaXMucG9zWzFdICsgcG9zQ2hhbmdlWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gW3RoaXMucG9zWzFdLCB1cGRhdGVkWV07XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKHgsIHkpIHtcblxuICAgICAgICBmaWxsKGN1cnJlbnRDb2xvcik7XG4gICAgICAgIGVsbGlwc2UoKHggKyAyMCksICh5ICsgMjApLCAxNSwgMTUpO1xuICAgIH1cblxuICAgIHRoaXMuZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHggPSB0aGlzLnBvc1swXTtcbiAgICAgICAgbGV0IHkgPSB0aGlzLnBvc1sxXTtcbiAgICAgICAgLy8gY29uc3Qga2V5cHJlc3MgPSBldmVudC5rZXlDb2RlO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgIGlmIChrZXlJc0Rvd24oTEVGVF9BUlJPVykpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudXNlci5wb3MpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvcyhbXCJ5XCIsIC00MF0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5wb3NbMF0sIHRoaXMucG9zWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlJc0Rvd24oUklHSFRfQVJST1cpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvcyhbXCJ5XCIsIDQwXSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0aGlzLnBvc1swXSwgdGhpcy5wb3NbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleUlzRG93bihVUF9BUlJPVykpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zKFtcInhcIiwgLTQwXSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0aGlzLnBvc1swXSwgdGhpcy5wb3NbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleUlzRG93bihET1dOX0FSUk9XKSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQb3MoW1wieFwiLCA0MF0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5wb3NbMF0sIHRoaXMucG9zWzFdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyO1xuXG4vLyBmdW5jdGlvbiBVc2VyKCl7XG4vLyAgICAgdGhpcy5yb3cgPSAxOTtcbi8vICAgICB0aGlzLmNvbCA9IDE5O1xuLy8gICAgIHRoaXMucmFkaXVzID0gMTA7XG4vLyAgICAgdGhpcy5wb3MgPSBbMCwgMF1cblxuLy8gICAgIGNvbnN0IGNvbG9ycyA9IFtcImxpZ2h0Y29yYWxcIiwgXCJvcmFuZ2VcIiwgXCJDaGFydHJldXNlXCIsIFwiZGFya2N5YW5cIiwgXCJkYXJrb3JjaGlkXCJdO1xuLy8gICAgIGxldCBjdXJyZW50Q29sb3IgPSBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldO1xuXG4gICAgXG4vLyAgICAgdGhpcy51cGRhdGVQb3MgPSBmdW5jdGlvbihwb3NDaGFuZ2Upe1xuLy8gICAgICAgICBzd2l0Y2gocG9zQ2hhbmdlWzBdKXtcbi8vICAgICAgICAgICAgIGNhc2UgXCJ4XCI6XG4vLyAgICAgICAgICAgICAgICAgbGV0IHVwZGF0ZWRYID0gdGhpcy5wb3NbMF0gKyBwb3NDaGFuZ2VbMV07XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5wb3MgPSBbdXBkYXRlZFgsIHRoaXMucG9zWzFdXTtcbi8vICAgICAgICAgICAgIGNhc2UgXCJ5XCI6XG4vLyAgICAgICAgICAgICAgICAgbGV0IHVwZGF0ZWRZID0gdGhpcy5wb3NbMV0gKyBwb3NDaGFuZ2VbMV07XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5wb3MgPSBbdGhpcy5wb3NbMV0sIHVwZGF0ZWRZXTsgXG4vLyAgICAgICAgIH1cbi8vICAgICB9XG5cbiAgICBcbi8vICAgICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKHgsIHkpIHtcblxuLy8gICAgICAgICBmaWxsKGN1cnJlbnRDb2xvcik7XG4vLyAgICAgICAgIGVsbGlwc2UoMTksIDE5LCAxNSwgMTUpO1xuLy8gICAgIH1cbi8vIH1cblxuLy8gbW9kdWxlLmV4cG9ydHMgPSBVc2VyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./user.js\n");

/***/ }),

/***/ "./wall.js":
/*!*****************!*\
  !*** ./wall.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Wall {\n  constructor() {\n    this.present = true;\n  }\n\n  render(wallPos, x, y) {\n    stroke(\"black\");\n    strokeWeight(3);\n    switch (wallPos) {\n      case 0:\n        line(x, y, x, y + 40);\n      case 1:\n        line(x, y + 40, x + 40, y + 40);\n      case 2:\n        line(x + 40, y + 40, x + 40, y);\n      case 3:\n        line(x + 40, y, x, y);\n    }\n\n  }\n\n  derender(wallPos, x, y) {\n    stroke(\"white\");\n    switch (wallPos) {\n      case 0:\n        line(x, y, x, y + 40);\n      case 1:\n        line(x, y + 40, x + 40, y + 40);\n      case 2:\n        line(x + 40, y + 40, x + 40, y);\n      case 3:\n        line(x + 40, y, x, y);\n    }\n  }\n}\n\n// class Wall{\n//     constructor(){\n//         this.present = true;\n//     }\n\n//   render = (i, x, y) => {\n//     stroke(255);\n//     switch (i) {\n//       case 0:\n//         line(x, y, x, y + 40);\n//       case 1:\n//         line(x, y + 40, x + 40, y + 40);\n//       case 2:\n//         line(x + 40, y + 40, x + 40, y);\n//       case 3:\n//         line(x + 40, y, x, y);\n//     }\n//   };\n// }\n\nmodule.exports = Wall;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93YWxsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2FsbC5qcz85MDU5Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFdhbGwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByZXNlbnQgPSB0cnVlO1xuICB9XG5cbiAgcmVuZGVyKHdhbGxQb3MsIHgsIHkpIHtcbiAgICBzdHJva2UoXCJibGFja1wiKTtcbiAgICBzdHJva2VXZWlnaHQoMyk7XG4gICAgc3dpdGNoICh3YWxsUG9zKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGxpbmUoeCwgeSwgeCwgeSArIDQwKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGluZSh4LCB5ICsgNDAsIHggKyA0MCwgeSArIDQwKTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbGluZSh4ICsgNDAsIHkgKyA0MCwgeCArIDQwLCB5KTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgbGluZSh4ICsgNDAsIHksIHgsIHkpO1xuICAgIH1cblxuICB9XG5cbiAgZGVyZW5kZXIod2FsbFBvcywgeCwgeSkge1xuICAgIHN0cm9rZShcIndoaXRlXCIpO1xuICAgIHN3aXRjaCAod2FsbFBvcykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBsaW5lKHgsIHksIHgsIHkgKyA0MCk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGxpbmUoeCwgeSArIDQwLCB4ICsgNDAsIHkgKyA0MCk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGxpbmUoeCArIDQwLCB5ICsgNDAsIHggKyA0MCwgeSk7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGxpbmUoeCArIDQwLCB5LCB4LCB5KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2xhc3MgV2FsbHtcbi8vICAgICBjb25zdHJ1Y3Rvcigpe1xuLy8gICAgICAgICB0aGlzLnByZXNlbnQgPSB0cnVlO1xuLy8gICAgIH1cblxuLy8gICByZW5kZXIgPSAoaSwgeCwgeSkgPT4ge1xuLy8gICAgIHN0cm9rZSgyNTUpO1xuLy8gICAgIHN3aXRjaCAoaSkge1xuLy8gICAgICAgY2FzZSAwOlxuLy8gICAgICAgICBsaW5lKHgsIHksIHgsIHkgKyA0MCk7XG4vLyAgICAgICBjYXNlIDE6XG4vLyAgICAgICAgIGxpbmUoeCwgeSArIDQwLCB4ICsgNDAsIHkgKyA0MCk7XG4vLyAgICAgICBjYXNlIDI6XG4vLyAgICAgICAgIGxpbmUoeCArIDQwLCB5ICsgNDAsIHggKyA0MCwgeSk7XG4vLyAgICAgICBjYXNlIDM6XG4vLyAgICAgICAgIGxpbmUoeCArIDQwLCB5LCB4LCB5KTtcbi8vICAgICB9XG4vLyAgIH07XG4vLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gV2FsbDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./wall.js\n");

/***/ })

/******/ });